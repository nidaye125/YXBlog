{"meta":{"title":"......","subtitle":"less code more art.","description":"前端匍匐前进","author":"......","url":"https://nidaye125.github.io"},"pages":[{"title":"Tags","date":"2018-12-22T02:23:04.094Z","updated":"2018-12-22T02:23:04.094Z","comments":true,"path":"tags/index.html","permalink":"https://nidaye125.github.io/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2018-12-20T03:53:27.000Z","updated":"2018-12-20T03:54:50.441Z","comments":false,"path":"about/index.html","permalink":"https://nidaye125.github.io/about/index.html","excerpt":"","text":""},{"title":"WhatIFeel","slug":"WhatIFeel","date":"2018-07-14T10:56:17.781Z","updated":"2018-07-14T10:56:17.781Z","comments":false,"path":"whatIFeel/index.html","permalink":"https://nidaye125.github.io/whatIFeel/index.html","excerpt":"","text":"(function() { var loadScript = function(path) { var $script = document.createElement('script') document.getElementsByTagName('body')[0].appendChild($script) $script.setAttribute('src', path) } setTimeout(function() { loadScript('./ins.js') }, 0) })()"},{"title":"","date":"2018-07-14T11:04:13.511Z","updated":"2018-07-14T11:04:13.511Z","comments":true,"path":"whatIFeel/ins.css","permalink":"https://nidaye125.github.io/whatIFeel/ins.css","excerpt":"","text":".article-header { border-bottom: 1px solid #ddd; } .content-item{ min-height: 150px; padding-top: 10px; list-style: none; border-bottom: 3px dashed pink; } .content-item span{ display: block; font-size:18px; } span.content-spec { padding: 20px; } @media screen and (max-width:600px) { .instagram .thumb { width: 50%; padding-bottom: 50%; } .instagram .album li { width: 100%; position: relative; padding-bottom: 100%; text-align: center; } .instagram .album div.img-box{ margin: 0; width: 90%; height: 90%; } }"},{"title":"","date":"2018-07-14T10:58:56.982Z","updated":"2018-07-14T10:58:56.982Z","comments":true,"path":"whatIFeel/ins.js","permalink":"https://nidaye125.github.io/whatIFeel/ins.js","excerpt":"","text":"(function(searchData) { function render(data){ console.log(data) var telDom = ''; data.list.forEach(item => { telDom += '' +''+item.date+'' +''+item.content+'' +''; }) document.getElementById('feelContent').innerHTML = telDom; } function loadData(success) { if (!searchData) { var xhr = new XMLHttpRequest(); xhr.open('GET', './ins.json?t=' + +new Date(), true); xhr.onload = function() { if (this.status >= 200 && this.status < 300) { var res = JSON.parse(this.response); searchData = res; success(searchData); } else { console.error(this.statusText); } }; xhr.onerror = function() { console.error(this.statusText); }; xhr.send(); } else { success(searchData); } } var Ins = { init: function init() { loadData(function(data) { render(data); }); } }; Ins.init(); // export default impush; /***/ })(undefined);"},{"title":"","date":"2018-07-14T10:52:49.557Z","updated":"2018-07-14T10:52:49.557Z","comments":true,"path":"whatIFeel/ins.json","permalink":"https://nidaye125.github.io/whatIFeel/ins.json","excerpt":"","text":"{\"list\":[{\"date\":\"2017-07\",\"content\":\"不知道该怎么说，就这么算了\"},{\"date\":\"2018-07\",\"content\":\"我也是真正的作死\"}]}"}],"posts":[{"title":"高阶组件入门（1)","slug":"react_hoc_1","date":"2018-12-22T05:17:20.058Z","updated":"2018-12-22T05:21:38.107Z","comments":true,"path":"2018/12/22/react_hoc_1/","link":"","permalink":"https://nidaye125.github.io/2018/12/22/react_hoc_1/","excerpt":"高阶组件最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。之前看过几篇文章介绍高阶组件，这篇文章就是动手操作一番，有时候还不得不吐槽，说好能获得到的属性跟方法为什么没有获取到？","text":"高阶组件最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。之前看过几篇文章介绍高阶组件，这篇文章就是动手操作一番，有时候还不得不吐槽，说好能获得到的属性跟方法为什么没有获取到？ 一、高阶组件定义 a higher-order component is a function that takes a component and returns a new component.翻译：高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。 还有一种写法就是： hocFactory:: W: React.Component =&gt; E: React.Component其中 W (WrappedComponent) 是指被包裹的 React.Component，E (EnhancedComponent) 指返回类型为 React.Component 的新的 HOC。 二、常见的HOC 实现方式（两种） （1）Props Proxy（属性代理）： HOC 控制传给WrappedComponent W 的 props 下面是用途： 更改 props 抽象 state 通过 refs 获取组件实例 把 WrappedComponent 与其它 elements包装在一起 （2）Inheritance Inversion（反向继承）： HOC 继承WrappedComponent W 的生命周期、state、各种function 下面是用途： 渲染劫持（Render Highjacking） 操作 state 看到上面的这些官方介绍也许会有点懵，但是总言而之：高阶组件就是牵扯到两个组件的事情，那么就有下面的两个问题：1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？(看完本篇就会得到答案：能，必须能啊。全部当成props传给WrappedComponent了)2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？ 下面介绍开始…三、Props Proxy （属性代理）— 操作props（3.1）更改props主要是高阶组件HOC控制传入wrappedComponent的props，来修改wrappedComponent内的props。如下图所示: 图3.1.1HOC将{…this.props}，{…newProps}传递给WrappedComponent 图3.1.2WrappedComponent中的参数，这里不仅仅有从HOC传来的参数，还有WrappedComponent(即Base)中自带的参数。 注意，若是props中有重名的字段，那么HOC的props将会覆盖WrappedComponent中的props.总言而之：你可以『读取，添加，修改，删除』将要传递给 WrappedComponent 的 props。 （3.2）抽象 state这里不是通过ref获取state， 而是通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。这里用的比较多的就是react处理表单的时候。通常react在处理表单的时候，一般使用的是受控组件（官方文档），即把input都做成受控的，改变value的时候，用onChange事件同步到state中。当然这种操作通过Container组件也可以做到，具体的区别放到后面去比较（这点我也没有弄明白呢）。看一下代码就知道怎么回事了： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970// 普通组件Login，这里充当WrappedComponentimport React, &#123; Component &#125; from 'react';import formCreate from './form-create';@formCreate //这个用法是es7语法，下面有文章链接export default class Login extends Component &#123; render() &#123; return ( &lt;div&gt; &lt;div&gt; &lt;label id=\"username\"&gt; 账户 &lt;/label&gt; &lt;input name=\"username\" &#123;...this.props.getField('username')&#125;/&gt; &lt;/div&gt; &lt;div&gt; &lt;label id=\"password\"&gt; 密码 &lt;/label&gt; &lt;input name=\"password\" &#123;...this.props.getField('password')&#125;/&gt; &lt;/div&gt; &lt;div onClick=&#123;this.props.handleSubmit&#125;&gt;提交&lt;/div&gt; &lt;div&gt;other content&lt;/div&gt; &lt;/div&gt; ) &#125;&#125;//HOC，高阶组件从这里开始import React, &#123; Component &#125; from 'react';const formCreate = WrappedComponent =&gt; class extends Component &#123; constructor() &#123; super(); this.state = &#123; fields: &#123;&#125;, &#125; &#125; //是下面方法 getField()用到的 onChange = key =&gt; e =&gt; &#123; const &#123; fields &#125; = this.state; fields[key] = e.target.value; this.setState(&#123; fields, &#125;) &#125; handleSubmit = () =&gt; &#123; console.log(this.state.fields); &#125; getField = fieldName =&gt; &#123; return &#123; onChange: this.onChange(fieldName), &#125; &#125; render() &#123; const props = &#123; ...this.props, handleSubmit: this.handleSubmit, getField: this.getField, &#125; return (&lt;WrappedComponent &#123;...props&#125; /&gt;); &#125;&#125;;export default formCreate; 关键：这里我们把state，onChange等方法都放到HOC里，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了。 （3.3）通过 refs 获取组件实例当我们包装WrappedComponent的时候，想获取到它的实例怎么办，可以通过引用(ref),在WrappedComponent组件挂载的时候，会执行ref的回调函数，在HOC中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。 1234567891011121314151617import React, &#123; Component &#125; from 'react';const refHoc = WrappedComponent =&gt; class extends Component &#123; componentDidMount() &#123; console.log(this.instanceComponent, 'instanceComponent'); &#125; render() &#123; return (&lt;WrappedComponent &#123;...this.props&#125; ref=&#123;instanceComponent =&gt; this.instanceComponent = instanceComponent&#125; /&gt;); &#125;&#125;;export default refHoc; （3.4）把 WrappedComponent 与其它 elements包装在一起这一点就是很简单且容易理解：出于操作样式、布局或其它目的，你可以将 WrappedComponent 与其它组件包装在一起。一些基本的用法也可以使用正常的父组件来实现。 此处看一下父组件能做和不能做的事情（与高阶组件对比）：1.操作 props2.抽象 state。但是有缺点，不能再父组件外获取到它的 state，除非明确地实现了钩子。3.与新的 React Element 包装。这似乎是唯一一点，使用父组件要比高阶组件强，但高阶组件也同样可以实现。4.Children 的操控。如果 children 不是单一 root，则需要多添加一层来包括所有 children，可能会使你的 markup 变得有点笨重。使用高阶组件可以保证单一 root。5.父组件可以在元素树立随意使用，它们不像高阶组件一样限制于一个组件。 通常来讲，能使用父组件达到的效果，尽量不要用高阶组件，因为高阶组件是一种更 hack 的方法，但同时也有更高的灵活性。下一篇会继续介绍一下II 高阶组件的es7语法@装饰器","categories":[{"name":"工作","slug":"工作","permalink":"https://nidaye125.github.io/categories/工作/"}],"tags":[{"name":"react","slug":"react","permalink":"https://nidaye125.github.io/tags/react/"},{"name":"react-hoc","slug":"react-hoc","permalink":"https://nidaye125.github.io/tags/react-hoc/"}]},{"title":"高阶组件入门（2)","slug":"react_hoc_2","date":"2018-12-22T05:17:20.058Z","updated":"2018-12-22T05:21:28.041Z","comments":true,"path":"2018/12/22/react_hoc_2/","link":"","permalink":"https://nidaye125.github.io/2018/12/22/react_hoc_2/","excerpt":"（一）前篇回顾上篇文章React高阶组件操作入门（一）介绍了高阶组件的实现方式之一：PP（属性代理）。 其实在第一篇提到，高阶组件的使用就是涉及到两个问题： 1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？","text":"（一）前篇回顾上篇文章React高阶组件操作入门（一）介绍了高阶组件的实现方式之一：PP（属性代理）。 其实在第一篇提到，高阶组件的使用就是涉及到两个问题： 1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？ 在第一篇文章就是解答了第一个问题，答案是能！！HOC将HOCd的props,state,function,当作props传给WrappedComponent组件，WrappedComponent通过this.props取到这些内容，如下图： 图1-1 EnhacedComponent组件传值 图1-2 WrappedComponent组件接收 （二）Inheritance Inversion（反向继承）反向继承可以解决上述的第二个疑问：组件wrappedComponent能否将props,state,function传递给EnhancedComponent？ 这里是指EnhacedComponent继承了WrappedComponent组件的生命周期、state和function。按照上篇文章提到的两点用途出发来深入理解II。 渲染劫持（Render Highjacking） 操作 state （2.1）渲染劫持 本质就是EnhacedComponent继承了WrappedComponent组件的生命周期函数，尤其是render()函数 1234567891011121314151617181920212223242526//Wrappedcomponentimport React, &#123; Component &#125; from 'react';class Usual extends Component &#123; constructor(props) &#123; super(props); this.state = &#123; usual: 'usual', &#125; &#125; componentDidMount() &#123; console.log('didMount') &#125; render() &#123; console.log(this.props); return ( &lt;div&gt; Usual &lt;/div&gt; ) &#125;&#125;export default Usual; 123456789101112131415161718192021//下面是HOCimport React, &#123; Component &#125; from 'react';const iiHoc = WrappedComponent =&gt; class extends WrappedComponent &#123; constructor(props)&#123; super(props); this.state = &#123; ...this.state, &#125; &#125; alertFunc = () =&gt;&#123; alert(\"HOC\"); &#125; render() &#123; return &lt;div&gt;&#123;super.render()&#125;&lt;/div&gt; &#125;&#125;export default iiHoc; 这样会正常的渲染出来 Usual （2.2）操作 state 本质就是EnhacedComponent继承了WrappedComponent组件的state 如图2-2-1通过this.state获取到WrappedComponent的state 但是，关键是在EnhacedComponent的constructor中没有定义自己的state！！ 若是定义就会出现的问题如下图2-2-2所示 图2-2-2 EnhancedComponent的constructor中定义state,那么this.state的取值 EnhacedComponent的state覆盖了Wrapped Component的state。这时候的怎么让两者并存呢？如下图2-2-3所示 图2-2-3 EnhacedComponent的state与WrappedComponent的state并存 （2.3）function的继承这里就不多说，通过this.functionName()就可以调用到WrappedComponent中的方法。但是有一个注意的：若是EnhancedComponent中的方法与WrappedComponent的方法重名，那么EnhacedComponent函数覆盖Wrapped Component函数。 （三）此处看一下父组件与高阶组件对比有些同学可能会觉得高阶组件有些类似父组件的使用。例如，我们完全可以把高阶组件中的逻辑放到一个父组件中去执行，执行完成的结果再传递给子组件。从逻辑的执行流程上来看，高阶组件确实和父组件比较相像，但是高阶组件强调的是逻辑的抽象。高阶组件是一个函数，函数关注的是逻辑；父组件是一个组件，组件主要关注的是UI/DOM。如果逻辑是与DOM直接相关的，那么这部分逻辑适合放到父组件中实现；如果逻辑是与DOM不直接相关的，那么这部分逻辑适合使用高阶组件抽象，如数据校验、请求发送等。 （四）使用高阶组件遇到的问题（4.1）静态方法丢失无论PP还是II的方式，WrappedComponent的静态方法都不会复制，如果要用需要我们单独复制。因为高阶组件返回的新组件，是不包含被包装组件的静态方法。具体的解决方案如下 静态方法解决方式 （4.2）refs不会传递。意思就是HOC里指定的ref，并不会传递到子组件，如果你要使用最好写回调函数通过props传下去。 （4.3）不要在render方法内部使用高阶组件。简单来说react的差分算法会去比较 NowElement === OldElement, 来决定要不要替换这个elementTree。。因为高阶组件每次都会返回一个新的组件，在render中使用会导致每次渲染出来的组件都不相等（===），于是每次render，组件都会卸载（unmount），然后重新挂载（mount），既影响了效率，又丢失了组件及其子组件的状态。高阶组件最适合使用的地方是在组件定义的外部，这样就不会受到组件生命周期的影响了。 （4.4）最重要的原则就是，注意高阶组件不会修改子组件，也不拷贝子组件的行为。高阶组件只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数 （4.5）要给hoc添加class名，便于debugger。当我们在chrome里应用React-Developer-Tools的时候，组件结构可以一目了然，所以DisplayName最好还是加上。 123456789101112131415const getDisplayName = component =&gt; component.displayName || component.namefunction hoc(WrappedComponent)&#123; return class HOC extends Component &#123; static displayName = `HOC($&#123;getDisplayName(WrappedComponent)&#125;)` constructor(props) &#123; &#125; componentWillMount() &#123; render() &#123; return () &#125; &#125;&#125;export default hoc; refs不会传递解决方法 （五）依然存留的疑问1.上述两个问题中的第二个问题：.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？中没有解答是wrappedComponent能否将props传递给EnhancedComponent，这个没有找到资料，也许这是没有必要的操作。根据后续的深入开发以及学习中，也许会解答这个问题。2.属性的校验我们知道PropsTypes有着属性校验，那么EnhacedComponent与WrappedComponent之间的传值可以走属性校验吗？","categories":[{"name":"工作","slug":"工作","permalink":"https://nidaye125.github.io/categories/工作/"}],"tags":[{"name":"react","slug":"react","permalink":"https://nidaye125.github.io/tags/react/"},{"name":"react-hoc","slug":"react-hoc","permalink":"https://nidaye125.github.io/tags/react-hoc/"}]},{"title":"git新操作备注","slug":"git","date":"2018-12-22T05:17:20.057Z","updated":"2018-12-22T05:21:45.770Z","comments":true,"path":"2018/12/22/git/","link":"","permalink":"https://nidaye125.github.io/2018/12/22/git/","excerpt":"使用git进行工程的操作，长期下来git pull 、git add 、git push、就可以完成日常所需，但是近期有些其他的操作，记录下来都是亲身测试有效的","text":"使用git进行工程的操作，长期下来git pull 、git add 、git push、就可以完成日常所需，但是近期有些其他的操作，记录下来都是亲身测试有效的 1.开个新分支（1）如果新建一个以develop内容为基础的分支 git checkout develop git checkout -b yx0628develop_new 不断修改不断的保存也是可以生成log的 git add . //这是提交全部修改，慎重 git commit -m’全部修改提交’ （2）把新分支的代码合并到develop 前提：先把新分支yx0628develop_new的代码add完毕，commit完毕 git checkout develop git merge yx0628develop_new无冲突 git push有冲突 解决冲突 git add 冲突文件 git commit -m’随便你想写什么’ git push ###2.代码迁移仓库（保留log）不保留log等提交的记录的迁移就不说了，soeasy！目标：把A仓库的代码迁移到B仓库并且保存所有的git log，B仓库已经存在了哦，哪怕是个空仓库。 再说这个之前先说点其他。在使用git的时候我们可能见到这样的命令。不想看解说想直接看步骤的，直接步骤 git pull origin master //拉取远程master分支的代码 git push origin master //把代码推到远程master分支上去 有没有人好奇为什么是origin，而不是其他名字，比如git pull orginal master或者git pull origin2 master; 解答上面的问题很简单，请在你的工程中输入 git remote 发现了什么呢？默认就有一个origin，代表远程仓库。origin是有地址，地址就是当前仓库的git地址，是个url哦。所以为什么git push origin master就自动相应的推到的远程仓库的master分支了。 下面是正确的操作步骤，(看准情况分类很重要，就两种)不管哪种情况请从情况1开始看哈哈： 情况1：B仓库是一个空仓库，除了默认的master分支，没有任何分支。把A的branch1,branch2,branch3…依次迁入B，B也就有branch1,branch2,branch3, 进入A工程 git remote 原因：看下当前远程仓库有啥名字，然后取个崭新的名字，不重复的名字，名字是过渡，不必纠结。这里取名origin2 git remote add origin2 master 不纠结照抄这就话 git remote set-url origin2 git@git.hub.com:B.git 原因：后面的B仓库地址url才是关键，origin2只是过渡，百人百种起法 进入A工程的branch1分支上 git pull 原因：拉取一下最新代码 git checkout -b branchB1 原因：branchB1是基于A工程branch1开的新分支，代码跟A工程branch1一毛一样，但是这个名字branchB1非常重要，非常重要，原因只有一个：这个分支会被推到B工程，结果就是B工程下面就有这个分支。所以你懂的，万一你的B工程下面已经有了该分支名字，你这个做了好多工作的branchB1是根本推不上去的，是不是很疯狂 git push origin2 结果：这一步能不能成功就看上一步，不多说，就看你取名字瞎不瞎 如果上面的结束，说明已经成功迁移出一个分支了。常见问题： 疑问1:问其他的分支怎么做，请重复 进入A工程的branch2分支上 git pull git checkout -b branchB2 git push origin2branch2 变成branchB2然后被推到B仓库 疑问2:你还问我第三个分支怎么迁移，不解释啦实在不行哎我还能说啥。 疑问3: 我打眼一看B工程中的分支名字都是branchB1,branchB2….怎么破，改分支的名字直接登陆git.hub.com,打开工程你会看到branches这个，点进去可以修改.至于改名字，代码都迁移过去了，改个名字还很远吗 情况2：B仓库不是一个空仓库，里面各种各样乱七八糟的分支。把A的branch1,branch2,branch3…一次迁入B，B也就有branch1,branch2,branch3, 呃呃呃呃呃，步骤跟上面一毛一样，能不能推成功，就看你起名字的功夫了。什么名字，就是你最后要推到B工程上去的分支名字，注意在这里.","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://nidaye125.github.io/tags/git/"}]},{"title":"JS作用域系列5——原型3","slug":"JS作用域系列5——原型3","date":"2018-09-28T07:56:59.000Z","updated":"2018-12-22T05:17:20.057Z","comments":true,"path":"2018/09/28/JS作用域系列5——原型3/","link":"","permalink":"https://nidaye125.github.io/2018/09/28/JS作用域系列5——原型3/","excerpt":"前两篇的总结","text":"前两篇的总结 1 函数对象理解：本文的构造器指的是函数对象 1.1内置的函数对象所有函数对象的proto都指向Function.prototype，它是一个空函数（Empty function） 这句话有条件限制，先去找构造函数的原型对象12345678910111213141516171819202122232425262728Number.__proto__ === Function.prototype // trueNumber.constructor == Function //trueBoolean.__proto__ === Function.prototype // trueBoolean.constructor == Function //trueString.__proto__ === Function.prototype // trueString.constructor == Function //true// 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身Object.__proto__ === Function.prototype // trueObject.constructor == Function // true// 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身Function.__proto__ === Function.prototype // trueFunction.constructor == Function //trueArray.__proto__ === Function.prototype // trueArray.constructor == Function //trueRegExp.__proto__ === Function.prototype // trueRegExp.constructor == Function //trueError.__proto__ === Function.prototype // trueError.constructor == Function //trueDate.__proto__ === Function.prototype // trueDate.constructor == Function //true JavaScript中有内置(build-in)构造器/对象共计12个（ES5中新加了JSON），这里列举了可访问的8个构造器。 剩下如Global不能直接访问，Arguments仅在函数调用时由JS引擎创建。 Math，JSON是以对象形式存在的，无需new。它们的proto是Object.prototype。如下 12345Math.__proto__ === Object.prototype // trueMath.construrctor == Object // trueJSON.__proto__ === Object.prototype // trueJSON.construrctor == Object //true 1.2 自定义的函数对象123456// 函数声明function Person() &#123;&#125;// 函数表达式var Perosn = function() &#123;&#125;console.log(Person.__proto__ === Function.prototype) // trueconsole.log(Man.__proto__ === Function.prototype) // true 所有的构造器（函数对象）都来自于 Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了==Function.prototype==的属性及方法。如length、call、apply、bind 1.3 原型对象类型Function.prototype也是唯一一个typeof XXX.prototype为 function的prototype。 12345678910console.log(typeof Function.prototype) // functionconsole.log(typeof Object.prototype) // objectconsole.log(typeof Number.prototype) // objectconsole.log(typeof Boolean.prototype) // objectconsole.log(typeof String.prototype) // objectconsole.log(typeof Array.prototype) // objectconsole.log(typeof RegExp.prototype) // objectconsole.log(typeof Error.prototype) // objectconsole.log(typeof Date.prototype) // objectconsole.log(typeof Object.prototype) // object 知道了所有构造器（含内置及自定义）的proto都是Function.prototype，那Function.prototype的proto是谁呢？ 相信都听说过JavaScript中函数也是一等公民，那从哪能体现呢？如下 1console.log(Function.prototype.__proto__ === Object.prototype) // true 这说明所有的构造器的原型对象也都是一个普通对象，可以给构造器添加/删除属性等。同时它也继承了Object.prototype上的所有方法：toString、valueOf、hasOwnProperty等。 最后Object.prototype的proto是谁？ 1Object.prototype.__proto__ === null // true 2 prototype和proto2.1 Object.prototype 在 ECMAScript 核心所定义的全部属性中，最耐人寻味的就要数 prototype 属性了。对于 ECMAScript 中的引用类型而言，prototype 是保存着它们所有实例方法的真正所在。换句话所说，诸如 toString()和 valuseOf() 等方法实际上都保存在 prototype 名下，只不过是通过各自对象的实例访问罢了。 我们知道 JS 内置了一些方法供我们使用，比如： 对象可以用 constructor/toString()/valueOf() 等方法; 数组可以用 map()/filter()/reducer() 等方法； 数字可用用 parseInt()/parseFloat()等方法； Why ？？？ 当我们创建一个函数时： 1var Person = new Object() Person 是 Object 的实例，所以 Person 继承了Object 的原型对象Object.prototype上所有的方法： 12345678910111213141516Object.prototype&#123;constructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()&#125; Object 的每个实例都具有以上的属性和方法。所以我可以用1Person.constructor 也可以用1Person.hasOwnProperty 2.2 Array.prototype当我们创建一个数组时： 1var num = new Array() num 是 Array 的实例，所以 num 继承了Array 的原型对象Array.prototype上所有的方法： 1234567891011121314151617181920212223242526272829303132333435363738[ concat: ƒ concat() constructor: ƒ Array() copyWithin: ƒ copyWithin() entries: ƒ entries() every: ƒ every() fill: ƒ fill() filter: ƒ filter() find: ƒ find() findIndex: ƒ findIndex() flat: ƒ flat() flatMap: ƒ flatMap() forEach: ƒ forEach() includes: ƒ includes() indexOf: ƒ indexOf() join: ƒ join() keys: ƒ keys() lastIndexOf: ƒ lastIndexOf() length: 0 map: ƒ map() pop: ƒ pop() push: ƒ push() reduce: ƒ reduce() reduceRight: ƒ reduceRight() reverse: ƒ reverse() shift: ƒ shift() slice: ƒ slice() some: ƒ some() sort: ƒ sort() splice: ƒ splice() toLocaleString: ƒ toLocaleString() toString: ƒ toString() unshift: ƒ unshift() values: ƒ values() Symbol(Symbol.iterator): ƒ values() Symbol(Symbol.unscopables): &#123;copyWithin: true, entries: true, fill: true, find: true, findIndex: true, …&#125; __proto__: Object] 1num.hasOwnProperty // ƒ hasOwnProperty() &#123; [native code] &#125; 当你用num.hasOwnPrototype()时，JS 会先查一下它的构造函数 （Array） 的原型对象 Array.prototype 有没有有hasOwnPrototype()方法，没查到的话继续查一下 Array.prototype 的原型对象 Array.prototype.proto有没有这个方法。 2.3 原型对象赋值方式123所有对象的 __proto__ 都指向其构造器的 prototype所有函数对象的 __proto__ 都指向 Function.prototype，它是一个空函数（Empty function） 先看看 JS 内置构造器：1234567891011var obj = &#123;name: 'jack'&#125;var arr = [1,2,3]var reg = /hello/gvar date = new Datevar err = new Error('exception') console.log(obj.__proto__ === Object.prototype) // trueconsole.log(arr.__proto__ === Array.prototype) // trueconsole.log(reg.__proto__ === RegExp.prototype) // trueconsole.log(date.__proto__ === Date.prototype) // trueconsole.log(err.__proto__ === Error.prototype) // true 再看看自定义的构造器，这里定义了一个 Person： 12345function Person(name) &#123; this.name = name;&#125;var p = new Person('jack')console.log(p.__proto__ === Person.prototype) // true 每个对象都有一个 constructor 属性，可以获取它的构造器，因此以下打印结果也是恒等的： 12345function Person(name) &#123; this.name = name&#125;var p = new Person('jack')console.log(p.__proto__ === p.constructor.prototype) // true 上面的Person没有给其原型添加属性或方法，这里给其原型添加一个getName方法： 12345678910function Person(name) &#123; this.name = name&#125;// 修改原型Person.prototype.getName = function() &#123;&#125;var p = new Person('jack')console.log(p.__proto__ === Person.prototype) // trueconsole.log(p.__proto__ === p.constructor.prototype) // trueconsole.log(p.constructor) // ƒ Person(name) &#123; this.name = name&#125; 可以看到p.proto与Person.prototype，p.constructor.prototype都是恒等的，即都指向同一个对象。 如果换一种方式设置原型，结果就有些不同了： 123456789101112function Person(name) &#123; this.name = name&#125;// 重写原型Person.prototype = &#123; getName: function() &#123;&#125;&#125;var p = new Person('jack')console.log(p.__proto__ === Person.prototype) // trueconsole.log(p.__proto__ === p.constructor.prototype) // falseconsole.log(p.constructor) //ƒ Object() &#123; [native code] &#125; 这里直接重写了 Person.prototype（注意：上一个示例是修改原型）。输出结果可以看出p.proto仍然指向的是Person.prototype，而不是p.constructor.prototype。 这也很好理解，给Person.prototype赋值的是一个对象直接量{getName: function(){}}，使用对象直接量方式定义的对象其构造器（constructor）指向的是根构造器Object，Object.prototype是一个空对象{}，{}自然与{getName: function(){}}不等。如下： 上面的的最后一句暴露了 1Person.prototype !== Object.prototype 1234var p = &#123;&#125;console.log(Object.prototype) // 为一个空的对象&#123;&#125;console.log(p.constructor === Object) // 对象直接量方式定义的对象其constructor为Objectconsole.log(p.constructor.prototype === Object.prototype) // 为true，不解释(๑ˇ3ˇ๑) 4 继承 原型和原型链是JS实现继承的一种模型。 原型链的形成是真正是靠proto 而非prototype 要深入理解这句话，我们再举个例子，看看前面你真的理解了吗？ 12345678var animal = function()&#123;&#125;; var dog = function()&#123;&#125;; animal.price = 2000; dog.prototype = animal; var tidy = new dog(); console.log(dog.price) //undefined console.log(tidy.price) // 2000 这里解释一下： 123456789var dog = function()&#123;&#125;; dog.prototype.price = 2000; var tidy = new dog(); console.log(tidy.price); // 2000 console.log(dog.price); //undefined var dog = function()&#123;&#125;; var tidy = new dog(); tidy.price = 2000; console.log(dog.price); //undefined 这个明白吧？想一想我们上面说过这句话： 实例（tidy）和 原型对象（dog.prototype）存在一个连接。不过，要明确的真正重要的一点就是，这个连接存在于实例（tidy）与构造函数的原型对象（dog.prototype）之间，而不是存在于实例（tidy）与构造函数（dog）之间。 5 解惑主要是Function和Object疑点解惑： 1Object.__proto__ === Function.prototype // true Object 是函数对象，是通过new Function()创建的，所以Object.proto指向Function.prototype。「所有函数对象的proto都指向Function.prototype」） 1Function.__proto__ === Function.prototype // true Function 也是对象函数，也是通过new Function()创建，所以Function.proto指向Function.prototype。 自己是由自己创建的。 1Function.prototype.__proto__ === Object.prototype //true JS一直强调万物皆对象，函数对象也是对象，给他认个祖宗，指向Object.prototype。Object.prototype.proto === null，保证原型链能够正常结束。","categories":[{"name":"总结","slug":"总结","permalink":"https://nidaye125.github.io/categories/总结/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://nidaye125.github.io/tags/JS/"}]},{"title":"JS作用域系列5——原型2","slug":"JS作用域系列5——原型2","date":"2018-09-28T07:55:59.000Z","updated":"2018-12-22T05:17:20.057Z","comments":true,"path":"2018/09/28/JS作用域系列5——原型2/","link":"","permalink":"https://nidaye125.github.io/2018/09/28/JS作用域系列5——原型2/","excerpt":"proto是什么含义，以及proto与prototype是什么关系，下面就是解释","text":"proto是什么含义，以及proto与prototype是什么关系，下面就是解释 1 proto1.1 proto指向原型对象JS 在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做proto 的内置属性，用于指向创建它的构造函数的原型对象。 对象 person1 有一个proto属性，创建它的构造函数是 Person，构造函数的原型对象是 Person.prototype ，所以： 1person1.__proto__ == Person.prototype 请看下图 根据上面这个连接图，我们能得到： 123Person.prototype.constructor == Person;person1.__proto__ == Person.prototype;person1.constructor == Person; 不过，要明确的真正重要的一点就是，这个连接存在于实例（person1）与构造函数（Person）的原型对象（Person.prototype）之间，而不是存在于实例（person1）与构造函数（Person）之间。 注意：因为绝大部分浏览器都支持proto属性，所以它才被加入了 ES6 里（ES5 部分浏览器也支持，但还不是标准） 总结2： proto属性存在每个对象中 proto属性指向++该构造函数的++原型对象 prototype属性指向++自身的++原型对象 都可以有proto属性，但是prototype属性只有函数对象才有 2 原型链上述的总结1，总结2，说了种种关系，这些关系构成了原型链 （Functions）函数对象一列不仅仅有proto属性，还是有prototype属性。 proto指向构造函数的原型对象 prototype指向自身的原型对象 （XX.prototype）原型对象那一列只有proto属性 proto指向构造函数的原型对象 实例那一列那一列只有proto属性 proto指向构造函数的原型对象 3 实践123451. person1.__proto__ 是什么？2. Person.__proto__ 是什么？3. Person.prototype.__proto__ 是什么？4. Object.__proto__ 是什么？5. Object.prototype__proto__ 是什么？ 答案：第一题： 因为 person1.proto === person1 的构造函数.prototype 因为 person1的构造函数 === Person 所以 person1.proto === Person.prototype 第二题： 因为 Person.proto === Person的构造函数.prototype 因为 Person的构造函数 === Function 所以 Person.proto === Function.prototype 第三题： Person.prototype 是一个普通对象，我们无需关注它有哪些属性，只要记住它是一个普通对象。 因为一个普通对象的构造函数 === Object 所以 Person.prototype.proto === Object.prototype 第四题，参照第二题，因为 Person 和 Object 一样都是构造函数 第五题： Object.prototype 对象也有proto属性，但它比较特殊，为 null 。 因为 null 处于原型链的顶端，这个只能记住。Object.prototype.proto === null","categories":[{"name":"总结","slug":"总结","permalink":"https://nidaye125.github.io/categories/总结/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://nidaye125.github.io/tags/JS/"}]},{"title":"JS作用域系列5——原型1","slug":"JS作用域系列5——原型1","date":"2018-09-28T07:55:58.000Z","updated":"2018-12-22T05:17:20.057Z","comments":true,"path":"2018/09/28/JS作用域系列5——原型1/","link":"","permalink":"https://nidaye125.github.io/2018/09/28/JS作用域系列5——原型1/","excerpt":"普通对象+函数对象，构造函数+实例，prototype属性+原型对象","text":"普通对象+函数对象，构造函数+实例，prototype属性+原型对象 综述：前面讲了作用域vs作用域链，可以知道作用域链是作用域的部分内容。下面将原型和原型链～～ 1 对象在此之前，先普及一下js中的对象分类： JavaScript中，万物皆对象！ 但对象也是有区别的，分为普通对象和函数对象。Object 、Function 是 JS 自带的函数对象。 1.1对象我们可以简单的将创建对象的方式分为三种： 函数创建对象、 字面量创建、 Object创建。 1.2 普通对象和函数对象12typeOf(普通对象) === objecttypeOf(函数对象）====Function 123456789101112131415161718var o1 = &#123;&#125;; var o2 =new Object();var o3 = new f1();function f1()&#123;&#125;; var f2 = function()&#123;&#125;;var f3 = new Function('str','console.log(str)');console.log(typeof Object); //function console.log(typeof Function); //function console.log(typeof f1); //function console.log(typeof f2); //function console.log(typeof f3); //function console.log(typeof o1); //object console.log(typeof o2); //object console.log(typeof o3); //object 在上面的例子中 o1 o2 o3 为普通对象，f1 f2 f3 为函数对象。 怎么区分，其实很简单，凡是通过 new Function() 创建的对象都是函数对象，其他的都是普通对象。f1,f2,归根结底都是通过 new Function()的方式进行创建的。Function Object 也都是通过 New Function()创建的。 1.3 new Function建议看完全篇之后再看这里 123var f3 = new Function('str','console.log(str)');console.log(typeof f3); //functionf3.constructor === Function; //true f3是实例，是函数对象而不是普通对象 12345console.log(typeof Function.prototype) ;//functionFunction.prototype.construtor == Function; //trueFunction.prototype.prototype; //undefine 原型对象，是函数对象不是普通对象，且这个函数对象没有protype属性 以上全都不符合总结部分的3.4.5条，请注意 一定要分清楚普通对象和函数对象，下面我们会常常用到它。 2 构造函数 new一下就出现构造函数和实例了 我们先复习一下构造函数的知识： 12345678function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; this.sayName = function() &#123; alert(this.name) &#125; &#125;var person1 = new Person('Zaxlct', 28, 'Software Engineer');var person2 = new Person('Mick', 23, 'Doctor'); 上面的例子中 person1 和 person2 都是 Person 的实例。这两个实例都有一个 constructor （构造函数）属性，该属性（是一个指针）指向 Person。 即： 12console.log(person1.constructor == Person); //trueconsole.log(person2.constructor == Person); //true 我们要记住两个概念（构造函数，实例）： person1 和 person2都是 构造函数 Person 的实例 一个公式：实例的构造函数属性（constructor）指向构造函数。 逆向理解，如果你用函数A去创造了A的实例，那么A就成了‘构造函数’，A的实例有个constructor属性（这个属性称之为构造函数属性）指向A 3.原型对象3.1 原型对象前面讲了普通对象、函数对象，下面是原型对象 123456789101112131415function Person() &#123;&#125; Person.prototype.name = 'Zaxlct'; Person.prototype.age = 28; Person.prototype.job = 'Software Engineer'; Person.prototype.sayName = function() &#123; alert(this.name);&#125; var person1 = new Person();person1.sayName(); // 'Zaxlct'var person2 = new Person();person2.sayName(); // 'Zaxlct'console.log(person1.sayName == person2.sayName); //true 那什么是原型对象呢？我们把上面的例子改一改你就会明白了： 12345678Person.prototype = &#123; name: 'Zaxlct', age: 28, job: 'Software Engineer', sayName: function() &#123; alert(this.name); &#125;&#125; 原型对象，顾名思义，它就是一个普通对象，从现在开始你要牢牢记住原型对象就是 Person.prototype 。 上述代码非常简单，Person原型对象定义了公共的say方法，从这个简单的例子里，我们可以得出： 3.2 用途 原型对象的用途是为每个实例对象存储共享的方法和属性，它仅仅是一个普通对象而已。并且所有的实例是共享同一个原型对象，因此有别于实例方法或属性，原型对象仅有一份。所有就会有如下等式成立： 1person.say == new Person().say 3.3 原型对象跟prototype属性在 JavaScript 中，每当定义一个对象（函数也是对象）时候，==对象中都会包含一些预定义的属性==。其中每个函数对象都有一个prototype 属性，这个属性指向函数的原型对象。 只有函数对象才有prototype属性 只有函数对象才有原型对象 或者说有prototype属性就有原型对象 规则1:每个对象都有 proto 属性，但只有函数对象才有 prototype 属性，才有原型对象 3.4 原型对象有constructor属性在默认情况下，所有的原型对象都会自动获得一个 constructor（构造函数）属性，这个属性（是一个指针）指向 prototype 属性所在的函数（Person） 规则2上面这句话有点拗口，我们「翻译」一下：有一个默认的 constructor 属性，这个属性是一个指针，指向 Person。即： Person.prototype.constructor == Person 3.5 原型对象是实例对象这是由3.3 、3.4推论而来 在上面第二小节《构造函数》里，我们知道实例的构造函数属性（constructor）指向构造函数 ：1person1.constructor == Person 这两个「公式」好像有点联系： 12person1.constructor == PersonPerson.prototype.constructor == Person person1 为什么有 constructor 属性？那是因为 person1 是 Person 的实例。那 Person.prototype 为什么有 constructor 属性？？同理， Person.prototype （你把它想象成 A） 也是Person 的实例。也就是在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype，基本过程如下： 12var A = new Person(); Person.prototype = A; ==可以理解为过程自然而然形成== 结论：原型对象（Person.prototype）是 构造函数（Person）的一个实例。 再次重复一遍。原型对象就是一个普通对象，有属性名和属性值，还有一个必不可少的contructor属性。 1234567特例：1. 我们知道什么对象是有constructor，那就是实例对象，所以原型对象Person.prototyle）是函数对象(Person)的一个实例。在函数对象创建的时候被创建的，因此也是一个普通对象，但是Function函数有点意外2. 但 Function.prototype 除外，它不是普通对象它是函数对象。但它很特殊，他没有prototype属性（前面说道函数对象都有prototype属性，因此都有原型对象） 总结 对象就分为普通对象，函数对象。原型对象属于普通对象（有特例） new一下就出现了构造函数跟实例，实例是普通对象（有特例6） 实例都有一个contrutor属性，指向构造函数（有特例6） 函数对象都有prototype属性，prototype属性指向原型对象（因此函数对象都有原型对象），原型对象是普通对象，原型对象中都有constructor属性，指向函数对象 由3，4可得到因为都有constructor属性，因此原型对象也是实例 但 Function.prototype 除外，它是函数对象，但它很特殊，他没有prototype属性（前面说道函数对象都有prototype属性）Function.prototype = new Function()//请看第一对象部分 4 参考最详尽的 JS 原型与原型链终极详解，没有「可能是」。（一） 一个例子让你彻底明白原型对象和原型链","categories":[{"name":"总结","slug":"总结","permalink":"https://nidaye125.github.io/categories/总结/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://nidaye125.github.io/tags/JS/"}]},{"title":"JS作用域系列4——闭包","slug":"JS作用域系列4——闭包","date":"2018-09-28T06:57:04.000Z","updated":"2018-12-22T05:17:20.056Z","comments":true,"path":"2018/09/28/JS作用域系列4——闭包/","link":"","permalink":"https://nidaye125.github.io/2018/09/28/JS作用域系列4——闭包/","excerpt":"综述作用域，受javascript链式作用域结构的影响，父级变量中无法访问到子级变量的值，为了解决这个问题，才使用的闭包。","text":"综述作用域，受javascript链式作用域结构的影响，父级变量中无法访问到子级变量的值，为了解决这个问题，才使用的闭包。 1. 前言作用域，受javascript链式作用域结构的影响，父级变量中无法访问到子级变量的值，为了解决这个问题，才使用的闭包。 闭包就是能够读取其他函数内部变量的函数。 (在JS中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解为”定义在一个函数内部的函数”。无论是在事件中，for循环中，还是在函数自调用中，只要return出来，便有闭包的应用)。 2. 举例1234567891011121314function a()&#123; var i=0; //函数b function b() &#123; alert(++i); &#125; return b;&#125; //函数c var c = a(); c(); 2.1 代码特点： 函数b嵌套在函数a内部； 函数a返回函数b。 代码中函数a的内部函数b，被函数a外面的一个变量c引用的时候，这就叫创建了一个闭包。有时候函数b也可以用一个匿名函数代替来返回，即return function(){}; 2.2 优点： 保护函数内的变量安全,加强了封装性 在内存中维持一个变量(用的太多就变成了缺点，占内存) 闭包之所以会占用资源是当函数a执行结束后, 变量i不会因为函数a的结束而销毁, 因为b的执行需要依赖a中的变量。 逻辑连续，当闭包作为另一个函数调用的参数时，避免你脱离当前逻辑而单独编写额外逻辑。 方便调用上下文的局部变量。 2.3 实践闭包的典型框架应该就是jquery了。 闭包是javascript语言的一大特点，主要应用闭包场合主要是为了：设计私有的方法和变量。 这在做框架的时候体现更明显，有些方法和属性只是运算逻辑过程中的使用的，不想让外部修改这些属性，因此就可以设计一个闭包来只提供方法获取。 不适合场景：返回闭包的函数是个非常大的函数 闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。 3. 场景闭包的常用场景有 是函数作为返回值， 是函数作为参数来传递。 闭包会把函数中变量的值保存下来，供其他函数使用，这些变量会一直保存在内存当中，这样占用大量的内存，使用不当很可能造成内存泄漏，故要及时清除，清楚方法有两种，一是标记清除，二便是引用计数清除。 不适用于 返回闭包的函数是个特别大的函数,很多高级应用都要依靠闭包实现. 使用闭包的好处是不会污染全局环境，方便进行模块化开发，减少形参个数，延长了形参的生命周期，坏处就是不恰当使用会造成内存泄漏","categories":[{"name":"总结","slug":"总结","permalink":"https://nidaye125.github.io/categories/总结/"}],"tags":[]},{"title":"JS作用域系列3——作用域链","slug":"JS作用域系列3——作用域链","date":"2018-09-28T05:55:24.000Z","updated":"2018-12-22T05:17:20.056Z","comments":true,"path":"2018/09/28/JS作用域系列3——作用域链/","link":"","permalink":"https://nidaye125.github.io/2018/09/28/JS作用域系列3——作用域链/","excerpt":"综述： 在《JS作用域系列2——作用域》中有个EC对象，包含VO，this，和Scope。Scope就是作用域链，也是再执行上下文创建过程中第二步就开始创建作用域链了","text":"综述： 在《JS作用域系列2——作用域》中有个EC对象，包含VO，this，和Scope。Scope就是作用域链，也是再执行上下文创建过程中第二步就开始创建作用域链了 (1)执行上下文(执行环境)略，在《JS作用域系列2——执行上下文》 (2)作用域链2.1 作用域链用处在红宝书中对作用域链的描述有这么一段话： 1. 当代码在一个环境中执行时，会创建变量对象的一个作用域链（作用域链指向变量对象）。所以作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端始终是当前执行的代码所在环境的变量对象。 2. 如果这个环境是函数，则将其活动对象作为变量对象。活动对象在最开始时只包含一个变量，即arguments对象。作用域链的下一个变量对象来自包含环境，而在下一个变量对象则来自下一个包含环境。这样一直延续到全局执行环境； 3. 全局执行环境的变量对象始终都是作用域链中的最后一个对象。 全局环境的变量对象始终存在，而局部环境的变量对象，则只在函数执行的过程中存在。 &gt; 活动对象 === 变量对象？ &gt; &gt; 当函数被调用的时候，一个特殊的对象——活动对象将会被创建。 换句话说，活动对象除了变量和函数声明之外，它还存储了形参和arguments对象。 &gt; 这不就是vo（变量对象吗）吗？ 作用域链知识总结 当代码在一个环境中执行时，都会创建一个作用域链。 作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问。整个作用域链的本质是一个指向变量对象的指针列表。作用域链的最前端，始终是当前正在执行的代码所在环境的变量对象，作用域链中的最后一个对象，始终是全局执行环境的变量对象。 如果这个环境是函数，则将其活动对象（activation object)作为变量对象。活动对象在最开始时只包含一个变量，就是函数内部的arguments对象。作用域链中的下一个变量对象来自该函数的包含环境，而再下一个变量对象来自再下一个包含环境。这样，一直延续到全局执行环境，全局执行环境的变量对象始终是作用域链中的最后一个对象。 2.2 作用域链形成 在创建XX函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链会被保存在内部的[[Scope]]属性中。当调用XX函数时，会为函数创建一个执行环境，然后通过赋值函数的[[Scope]]属性中的对象构建起执行环境的作用域链。 2.3 demo无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是闭包的情况又有所不同。在另一个函数内部定义的函数会将包含函数（即外部函数）的活动对象添加到它的作用域链中。因此，在createComparisonFunction()函数内部定义的匿名函数作用域链中，实际上将会包含外部函数createComparisonFunction()的活动对象。 var compare = createCOmparisionFunction(&apos;name&apos;); var result = compare({name:&apos;jack&apos;},{name:&apos;lisa&apos;}); //解除对匿名函数的引用 compareName = null ; 当上述代码执行时，下图展示了包含函数与内部匿名函数的作用域链 在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。(从下面看) 这样，匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是， createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。即当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象任然会留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才会被销毁。","categories":[{"name":"总结","slug":"总结","permalink":"https://nidaye125.github.io/categories/总结/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://nidaye125.github.io/tags/JS/"}]},{"title":"JS作用域系列2——作用域","slug":"JS作用域系列2——作用域","date":"2018-09-28T04:55:03.000Z","updated":"2018-12-22T05:17:20.056Z","comments":true,"path":"2018/09/28/JS作用域系列2——作用域/","link":"","permalink":"https://nidaye125.github.io/2018/09/28/JS作用域系列2——作用域/","excerpt":"综述： 在《JS作用域系列1——this》中所讲的整个流程就是一个执行环境的创建。 执行环境又称为作用域又称为执行上下文。","text":"综述： 在《JS作用域系列1——this》中所讲的整个流程就是一个执行环境的创建。 执行环境又称为作用域又称为执行上下文。 1. 执行上下文(执行环境) 涉及到上下文，函数的作用域或者说是执行环境 1.1 this的指向略，在《JS作用域系列1——this》 1.2执行环境的创建(为什么this的指向不定呢)一个函数被执行时，会创建一个执行环境（ExecutionContext），函数的所有的行为均发生在此执行环境中。构建该执行环境时： 1. JavaScript 首先会创建 arguments变量，其中包含调用函数时传入的参数。 2. 接下来创建作用域链。 3. 然后初始化变量， - 3.1 首先初始化函数的形参表，值为arguments变量中对应的值，如果arguments变量中没有对应值，则该形参初始化为 undefined； - 3.2 如果该函数中含有内部函数，则初始化这些内部函数； - 3.3 如果没有，继续初始化该函数内定义的局部变量，需要注意的是**此时这些变量初始化为 undefined，其赋值操作在执行环境（ExecutionContext）创建成功后，函数执行时才会执行； **这点对于我们理解 JavaScript 中的变量作用域非常重要，鉴于篇幅，我们先不在这里讨论这个话题。** 4. 最后为 this变量赋值，如前所述，**会根据函数调用方式的不同**，赋给 this全局对象，当前对象等。 至此函数的执行环境（ExecutionContext）创建成功，函数开始逐行执行，所需变量均从之前构建好的执行环境（ExecutionContext）中读取。 上面的文字非常的好，非常大好 ++上图还有一个大难点就是创建作用域链，下篇文章专讲++ 而这个执行环境怎么表示呢？js为每一个执行环境关联了一个变量对象VO（Variable Object ）。这个变量对象具体包含了argument、函数的形参，局部变量（内部变量） 1.3 执行环境、执行上下文(Execution Context)每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行后，栈将其环境弹出，把控制权返回给之前的执行环境。 1.3.1 执行环境的建立分为两个阶段： 进入执行上下文（创建阶段）和执行阶段（激活/执行阶段） 进入上下文阶段：就是执行环境的创建，发生在函数调用时，但在执行具体代码之前(上面图的最后一步)。具体完成创建，作用域链；创建变量、函数和参数以及求this的值 执行代码阶段：主要完成变量赋值、函数引用和解释/执行其他代码 总的来说可以将执行上下文看作是一个对象 12345EC = &#123; VO:&#123;/*函数中的arguments对象、参数、内部变量以及函数声明*/&#125;, this:&#123;&#125;, Scope:&#123;/*VO以及所有父执行上下文中的VO，或者称之为作用域链*/&#125; &#125; EC的组成正好将执行环境创建的过程给拆分了 这里需要说明一下：函数表达式不包含在变量对象之中 123456789function bar() &#123;&#125; // function declaration, FD (function baz() &#123;&#125;); // function expression, FE console.log( this.foo == foo, // true window.bar == bar // true ); console.log(baz); // ReferenceError, \"baz\" is not defined 之后，全局上下文的变量对象为","categories":[{"name":"总结","slug":"总结","permalink":"https://nidaye125.github.io/categories/总结/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://nidaye125.github.io/tags/JS/"}]},{"title":"JS作用域系列1——this","slug":"JS作用域系列1——this","date":"2018-09-28T03:55:09.000Z","updated":"2018-12-22T05:17:20.056Z","comments":true,"path":"2018/09/28/JS作用域系列1——this/","link":"","permalink":"https://nidaye125.github.io/2018/09/28/JS作用域系列1——this/","excerpt":"综述： 关于this最想知道的内容估计就是this的指向了，但是再js中，this的指向的确定不是在定义时候，而是在执行的时候，因为执行方式（调用方式）有多种。","text":"综述： 关于this最想知道的内容估计就是this的指向了，但是再js中，this的指向的确定不是在定义时候，而是在执行的时候，因为执行方式（调用方式）有多种。 1.1 this的指向首先必须要说的是，this的指向在函数定义的时候 是确定不了的，只有函数执行的时候才能确定 this到底指向谁下面是决策树，至于文字看面试2 1.2为什么this的指向不定呢总结的一段话：（IBM developerworks文档库来源）JavaScript 中的函数既可以被当作普通函数执行，也可以作为对象的方法执行，这是导致 this 含义如此丰富的主要原因。 一个函数被执行时，会创建一个执行环境（ExecutionContext），函数的所有的行为均发生在此执行环境中。构建该执行环境时： 1. JavaScript 首先会创建 arguments变量，其中包含调用函数时传入的参数。 2. 接下来创建作用域链。 3. 然后初始化变量， - 3.1 首先初始化函数的形参表，值为arguments变量中对应的值，如果arguments变量中没有对应值，则该形参初始化为 undefined。 - 3.2 如果该函数中含有内部函数，则初始化这些内部函数。 - 3.3 如果没有，继续初始化该函数内定义的局部变量，需要注意的是**此时这些变量初始化为 undefined，其赋值操作在执行环境（ExecutionContext）创建成功后，函数执行时才会执行，** 这点对于我们理解 JavaScript 中的变量作用域非常重要，鉴于篇幅，我们先不在这里讨论这个话题。 4. 最后为 this变量赋值，如前所述，**会根据函数调用方式的不同**，赋给 this全局对象，当前对象等。 至此函数的执行环境（ExecutionContext）创建成功，函数开始逐行执行，所需变量均从之前构建好的执行环境（ExecutionContext）中读取。 上面的文字非常的好，非常大好 而这个执行环境怎么表示呢？js为每一个执行环境关联了一个变量对象VO（Variable Object ）。这个变量对象具体包含了argument、函数的形参，局部变量（内部变量) 总的来说可以将执行上下文看作是一个对象 EC = { Scope:{/VO以及所有父执行上下文中的VO/} VO:{/函数中的arguments对象、参数、内部变量以及函数声明/} this:{}, } 1.3 this的指向规则1.隐式绑定（即使用.） 2.显式绑定 (call,apply,bind) 3.new 绑定 4.window 绑定 1.4 判断this的指向因此，将所有规则付诸实践，每当我在函数内部看到 this 关键字时，这些就是我为了判断它的引用而采取的步骤。 1.查看函数在哪被调用。 2.点左侧有没有对象？如果有，它就是 “this” 的引用。如果没有，继续第 3 步。 3.该函数是不是用 “call”、“apply” 或者 “bind” 调用的？如果是，它会显式地指明 “this” 的引用。如果不是，继续第 4 步。 4.该函数是不是用 “new” 调用的？如果是，“this” 指向的就是 JavaScript 解释器新创建的对象。如果不是，继续第 5 步。 5.是否在“严格模式”下？如果是，“this” 就是 undefined，如果不是，继续第 6 步。 6.JavaScript 很奇怪，“this” 会指向 “window” 对象。","categories":[{"name":"总结","slug":"总结","permalink":"https://nidaye125.github.io/categories/总结/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://nidaye125.github.io/tags/JS/"}]},{"title":"屏幕尺寸，分辨率，像素，PPI之间到底什么关系？","slug":"px","date":"2018-08-31T04:03:35.000Z","updated":"2018-12-22T05:17:20.058Z","comments":true,"path":"2018/08/31/px/","link":"","permalink":"https://nidaye125.github.io/2018/08/31/px/","excerpt":"px到底是什么，大小是什么？","text":"px到底是什么，大小是什么？ 屏幕尺寸，分辨率，像素，PPI之间到底什么关系？本文通过图解以及公式来讲解分析 项目中有个按钮内容是homepage，但是在一同事的chrome下展示的是homepag，在我的chrome展示为homepage，e只有一半，按钮宽度固定90px。于是我就想是不是分辨率的问题，因为我们的电脑不一样。后来我调整了mac的分辨率，发现还是展示为homepage，e只有一半，难道px跟分辨率没有关系？ 在解答上述问题，我们先认识一下这些概念，如尺寸，像素px，分辨率，像素密度等等 上面这是一张手机信息图片，下面我们了解下常说的几个参数代表的含义； 1.屏幕（主屏）尺寸是什么?5.2英寸并不是指的手机面积，实际上是指对角线长度。inch是长度单位，1英寸=2.54厘米 ， 可见是个物理长度 2.分辨率，像素是分辨率的单位？这里写的分辨率是1920PX*1080PX。可能大家注意了，1920和1080后面都跟了PX的字样，这个PX就是我们很熟悉的像素了，这个像素咱们后面讲，现在你只要明白，像素是分辨率的单位就好了。 在我们手机上呈现的一条线、一个面、一张图像都是由最小的单位像素来表示的，你也可以简单理解为是由一个个小方块组成的。看看下面这张图你就明白了。 记住：分辨率1920px*1080px的意思就是，在这个华为荣耀7的5.2英寸屏幕上，在竖向的高度上有1920个像素块，在横向的宽度上有1080个像素块。 3.什么是分辨率比？稍微计算一下高是1920px，宽是1080px的比例就会发现这个高和宽的比例是16:9的。可以比例很常见，过多不解释。 4.什么是屏幕像素密度？屏幕像素密度，即每英寸屏幕所拥有的像素数，英文简称PPI。注意，这里是指每英寸，还是个长度单位。这个英寸跟之前手机屏幕的尺寸一样，也是对角线的长度。所以，我们可以这么理解屏幕像素密度，即在一个对角线长度为1英寸的正方形内所拥有的像素数。有个公式方便理解 5.像素的大小是固定的吗？答：居然是不固定的，尤其不同设备之间！像素是没有实际的物理尺寸的。下面举个例子 上面的这两张图，第一张是苹果6手机的屏幕参数，第二张还是出镜率最高的华为荣耀7的屏幕参数。 虽然这两个手机的分辨率都是1920px*1080px。但是，苹果手机的屏幕尺寸比华为荣耀7小了0.2英寸。但是，苹果手机的屏幕像素密度（PPI）却比华为荣耀7高了45个PPI，也就是每英寸像素个数多了45个。 这说明了同样的一英寸的长度，苹果手机用469个ppi来显示，华为只用了424个ppi来显示。你能告诉我哪个手机的显示效果更加精细吗？同样是一英寸，同样都是像素，为啥苹果手机一英寸有469个像素，华为只有424个呢？ 手动计算下，按上面的平方公式，华为是423.653846 苹果440.6，但是实际上苹果确实469 我们知道，英寸是长度单位，它有固定的物理尺寸。那么问题就只能出在了像素身上。 这说明，像素这个东西，在苹果手机上变小了。所以，像素这个东西，就像金箍，能变大能变小。 6.电脑屏幕可以调分辨率，难道是通过调整它的像素大小实现的？答：当然不是！(非常重要解答了问题)在同一个设备上，它的像素个数是固定的，像素大小也是固定的，这是厂商在出厂时就设置好了的。只有不同的设备之间，才有像素大小的区别。 既然在同一个设备上，像素点数早就设定好了，那电脑上可以调整分辨率是怎么回事？我再怎么调，像素点数还是那么多啊。系统推荐的是1366px768px的分辨率，意味着微软在这块屏幕上横向设置了768个像素，竖向设置了1366个像素。再怎么拉扯，这个数字是不会变了。那么，为什么还能调整分辨率呢？如800px600px，按照定义，横向就是600个像素，竖向就是800个像素了啊。实际上把分辨率调成800600，系统就会分配给你800600个有效像素个数，也就是真实的色彩块。其他的个数就由系统自作主张，通过一系列运算给一个模拟色彩块，填充后达到1366*768个色彩块。那些拿来充数的像素块，和真实的像素块放到一起。就好比一个正规军，里面掺了很多杂牌军一样，只能是队伍不好带了。 7.PPI大的手机显示效果就越精细吗？答：的确是这样子的！屏幕的清晰程度其实是分辨率和尺寸大小共同决定，用ppi指数衡量屏幕清晰程度更加准确。 搜索一下blog，发现也有一篇blog涉及到像素，分辨率，下面放个链接通俗易懂！超全面的移动端尺寸基础知识科普指南","categories":[{"name":"工作","slug":"工作","permalink":"https://nidaye125.github.io/categories/工作/"}],"tags":[{"name":"css","slug":"css","permalink":"https://nidaye125.github.io/tags/css/"}]},{"title":"webpack单页应用和多页应用搭建初试水（一）","slug":"webpack初试水","date":"2018-08-27T08:05:40.000Z","updated":"2018-12-22T05:17:20.060Z","comments":true,"path":"2018/08/27/webpack初试水/","link":"","permalink":"https://nidaye125.github.io/2018/08/27/webpack初试水/","excerpt":"虽然之前研究过一些webpack配置，但是也没有着手去做过。再者平时的demo也都是基于react的，所以不得不使用webpack，这里就随便写个单页和多页的webpack。 前提，不考虑任何优化，什么代码分割，什么图片压缩，什么公共代码提取都一边去，这是最最简单的可以使用的单页和多页的应用.希望你还是要懂得一些基本的webpack配置，比如entry，output等等，如果这些也不是很清楚请直接ctrl+c ctrl+v","text":"虽然之前研究过一些webpack配置，但是也没有着手去做过。再者平时的demo也都是基于react的，所以不得不使用webpack，这里就随便写个单页和多页的webpack。 前提，不考虑任何优化，什么代码分割，什么图片压缩，什么公共代码提取都一边去，这是最最简单的可以使用的单页和多页的应用.希望你还是要懂得一些基本的webpack配置，比如entry，output等等，如果这些也不是很清楚请直接ctrl+c ctrl+v 在此处输入标题1.单页应用对应的就是一个页面，所有的功能请在一个页面实现，那么只需要两个文件：index.js和index.html。 1.1 index.js随便你想怎么拆分都行，随便你想引入什么文件都可以，请最后一定要有一句 ReactDOM.render( &lt;h1&gt;haha&lt;/h1&gt;, document.querySelector(&apos;#main&apos;) ); 注意： 1.import ReactDOM from ‘react-dom’; 2.index.html一定要有&lt;div id=&quot;main&quot;&gt;&lt;/div&gt; 1.2 index.html&lt;html&gt; &lt;body&gt; &lt;div id=&quot;main&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;./bundle.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 注意： 1.bundle.js命名以及路径与webpack.config.js有关系 1.3 webpack.config.jsvar path = require(&apos;path&apos;); module.exports = { devtool: &apos;#source-map&apos;, entry: &apos;./main.js&apos;, output: { filename: &apos;bundle.js&apos;, // path: path.resolve(__dirname, &apos;dist&apos;), }, module: { rules: [ { test: /\\.js?$/, exclude: /node_modules/, use: { loader: &apos;babel-loader&apos;, options: { presets: [&apos;es2015&apos;, &apos;react&apos;] } } }, { test: /\\.css$/, use: [ { loader: &apos;style-loader&apos; }, { loader: &apos;css-loader&apos;, } ] } ] }, }; 1.4 packgae.json&quot;scripts&quot;: { &quot;start&quot;: &quot;webpack-dev-server --inline --open&quot;, &quot;build&quot;: &quot;webpack --config webpack.config.js -p&quot; }, 2.多页应用多页应用其实要做好需要做很多，关键有公共代码的提取，毕竟每个页面差不多都要引入react 、react-dom等等一些公共文件，如果不提出来那么基础每夜会造成文件有点大，但是我们这里全都不考虑。 多页的应用关键就在于一个插件的使用：htmlwebpackplugin，为了生成多个html 2.1.页面请都放在pages/下面建立一个单独的文件夹，login/, 下面需有index.js 和 index.html 2.2 index.jsimport ReactDOM from &apos;react-dom&apos;; import React, { Component } from &apos;react&apos;; import &apos;./index.css&apos;; ReactDOM.render(&lt;h1&gt;这里是page1&lt;/h1&gt;, document.getElementById(&apos;main&apos;)); 2.3 index.html&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;锚点&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;main&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 2.4 webpack.config.jsvar path = require(&apos;path&apos;); var glob = require(&apos;glob&apos;); // const webpack = require(&apos;webpack&apos;); const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;); const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;); var entries = {}, chunks = [],plugins=[]; glob.sync(&apos;./pages/*/index.js&apos;).forEach(path =&gt; { const chunk = path.split(&apos;./pages/&apos;)[1].split(&apos;/index.js&apos;)[0]; entries[chunk] = path; chunks.push(chunk); }); glob.sync(&apos;./pages/*/index.html&apos;).forEach(path =&gt; { const chunk = path.split(&apos;./pages/&apos;)[1].split(&apos;/index.html&apos;)[0]; const filename = chunk + &apos;.html&apos;; const htmlConf = { filename: filename, template: path, inject: true, favicon: &apos;&apos;, hash: true, // 每个html引用的js模块，也可以在这里加上vendor等公用模块 chunks: [chunk] } plugins.push(new HtmlWebpackPlugin(htmlConf)); }); module.exports = { devtool:&apos;#source-map&apos;, entry: entries, output: { filename: &apos;bundle_[name].js&apos;, path:path.join(__dirname,&apos;dist&apos;) }, module: { rules: [ { test: /\\.js?$/, exclude: /node_modules/, use: { loader: &apos;babel-loader&apos;, options: { presets: [&apos;es2015&apos;, &apos;react&apos;] } } }, { test: /\\.css$/, use:ExtractTextPlugin.extract({ use: [ &apos;css-loader&apos; ], fallback: &apos;style-loader&apos; }) } ] }, plugins:[ new ExtractTextPlugin({ filename: &apos;[name].css&apos;, }), new CleanWebpackPlugin([&quot;dist&quot;]), ...plugins, ], devServer:{ inline: true, // hot load // contentBase: &apos;./pages&apos;, https:false, open:true, } }; 2.5 package.json&quot;scripts&quot;: { &quot;dev&quot;: &quot;webpack-dev-server --hot&quot;, &quot;build&quot;: &quot;webpack &quot; },","categories":[{"name":"实践","slug":"实践","permalink":"https://nidaye125.github.io/categories/实践/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://nidaye125.github.io/tags/webpack/"}]},{"title":"前端模块化（二）","slug":"前端模块化2","date":"2018-08-27T06:11:00.000Z","updated":"2018-12-22T05:17:20.060Z","comments":true,"path":"2018/08/27/前端模块化2/","link":"","permalink":"https://nidaye125.github.io/2018/08/27/前端模块化2/","excerpt":"综述： Commonjs,AMD,CMD,ES6的模块化总结","text":"综述： Commonjs,AMD,CMD,ES6的模块化总结 前端的四种模块化方案(webpack/require.js/seajs/browserify）JS不具备原生的模块化技能，因此需要采用第三方开发的模块依赖处理库来实现模块化：CommonJS、AMD、CMD、ES6 这四种方案的实现对比： CommonJS: exports + require AMD: define + require CMD：define+require+exports/exports Ps. CommonJS 和AMD上下的require也不是一样的,cmd与amd的文字一样内容差了好多参数） ES6: export + import 由于ES6本身是原生语言支持实现的模块化，但是现代浏览器大多都还未支持，因此必须使用相应的transpiler工具转换成ES5的AMD,CMD模块，再借助于systemjs/requirejs等模块加载工具才能使用。其中ES6的transpiler（代码转换器）一般是用babel，他的作用是将ES6 1.CommonJS适合服务器端 commonJS由nodeJS发扬光大，这标志着js模块化正式登场。 1.1定义模块根据commonJS规范，一个单独的文件是一个模块，每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非为global对象的属性。 2.2 模块输出模块只有一个出口，module.exports对象，我们需要把模块希望输出的内容放入该对象。 或者是exports，这些全都是因为commonjs规范一和规范二 2.3加载模块加载模块用require方法，该方法读取一个文件并且执行，返回文件内部的module.exports对象或者是exports。 注意(1). exports 与module.exports 的区别：exports 是对 module.exports 的引用，不能直接给exports 赋值，直接赋值无效，结果是一个空对象,module.exports 可以直接赋值：如示例 module.exports = 123; //123 module.exports = function () { //[Function] console.log(123) } exports = 123; //{} exports = function(){ //{} console.log(123) } （2)一个文件不能写多个module.exports如果写多个，对外暴露的接口是最后一个module.exports（3）模块如果没有指定使用module.exports 或者exports 对外暴露接口时，在其他文件就引用该模块，得到的是一个空对象{} 仔细看上面的代码，您会注意到 require 是同步的。模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。然而， 这在浏览器端问题多多。浏览器端，加载 JavaScript 最佳、最容易的方式是在 document中插入&lt;script&gt;标签。但脚本标签天生异步，传统 CommonJS 模块在浏览器环境中无法正常加载。 解决思路是，用一套标准模板来封装模块定义： 2.AMDAsynchronous Module Definition，称为异步模块。由于不是js原生支持，使用AMD规范进行页面开发需要用到对应的函数库，也就是大名鼎鼎的RequireJS，实际上AMD是RequireJS在推广过程中对模块定义的规范化的产出。requireJS主要解决两个问题：1 多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器。2 js加载的时候浏览器会停止页面渲染，加载文件愈多，页面失去响应的时间愈长。 语法： requireJS定义了一个函数define，它是全局变量，用来定义模块。 define(id,dependencies,factory) id 可选参数，用来定义模块的标识，如果没有提供该参数，脚本文件名（去掉拓展名） 依赖dependencies是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。有默认值，长度是三个 factory工厂方法，模块初始化要执行的函数或对象，如果为函数，它应该只被执行一次，如果是对象，此对象应该为模块的输出值。 在页面上使用require函数加载模块； require([dependencies], function(){}); 与上面的commonjs的require差别很大，上面是找文件这里的呢，是id+回调 require()函数接受两个参数： ——第一个参数是一个数组，表示所依赖的模块； ——第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块 AMD推崇的是依赖前置，被提前罗列出来并会背提前下载并执行，后来做了改进，可以不用罗列依赖模块，允许在回调函数中就近使用require引入并下载执行模块 3.CMD即common module definition，就像AMD有个requireJS,CMD有个浏览器实现的sea.js，sj要解决的问题和rj一样，只不过在模块定义方式和模块加载时机上有所不同。 1、AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块 2、CMD推崇就近依赖，只有在用到某个模块的时候再去require 这种区别各有优劣，只是语法上的差距，而且requireJS和SeaJS都支持对方的写法 AMD和CMD最大的区别：依赖模块执行时机不同 同样都是异步加载模块，AMD在加载模块完成后就会执行该模块（这里执行的被加载的模块而不是用户写的主逻辑模块），所有模块都加载执行完后会进入require的回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行上面加载的模块需要：加载+执行下面加载的模块：加载CMD加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到require语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的 一.模块化模块化开发，一个实现特定功能的文件就是一个模块，有了模块我们就可以更方便的使用别人的代码，要用什么功能就加载什么模块。模块化开发的4点好处： 1 避免变量污染，命名冲突 2 提高代码复用率 3 提高维护性 4 依赖关系的管理 前端模块化规范从原始野蛮阶段现在慢慢进入“文艺复兴”时代，实现的过程如下： 1. 函数封装我们在讲到函数逻辑的时候提到过，函数一个功能就是实现特定逻辑的一组语句打包，在一个文件里面编写几个相关函数就是最开始的模块了 详情见模块化（一） 缺点：污染了全局变量，并且不能保证和其他模块起冲突，模块成员看起来似乎没啥关系 2. 对象为了解决这个问题，有了新方法，将所有模块成员封装在一个对象中 详情见模块化（一） 这样 两个函数就被包在这个对象中， 嘿嘿 看起来没毛病是吗 继续往下：当我们要使用的时候，就是调用这个对象的属性module.m1()诶嘿 那么问题来了 这样写法会暴露全部的成员，内部状态可以被外部改变，比如外部代码可直接改变计数器的值 //坏人的操作 module._count = 10; 3. 立即执行函数这样就可以达到不暴露私有成员的目的外部无法访问内部私有变量 详情见模块化（一）","categories":[{"name":"总结 工作","slug":"总结-工作","permalink":"https://nidaye125.github.io/categories/总结-工作/"}],"tags":[{"name":"模块化","slug":"模块化","permalink":"https://nidaye125.github.io/tags/模块化/"}]},{"title":"前端模块化1","slug":"前端模块化1","date":"2018-08-27T06:08:43.000Z","updated":"2018-12-22T05:17:20.060Z","comments":true,"path":"2018/08/27/前端模块化1/","link":"","permalink":"https://nidaye125.github.io/2018/08/27/前端模块化1/","excerpt":"综述：在互联网应用越来越复杂，不可避免的需要工具来管理我们的前端代码。以前是一个巨大的脚本文件，如今希望可以将文件写入不同的文件模块，并且希望代码可以重用，可以简单地引用和添加各种各样的依赖到我们的项目。","text":"综述：在互联网应用越来越复杂，不可避免的需要工具来管理我们的前端代码。以前是一个巨大的脚本文件，如今希望可以将文件写入不同的文件模块，并且希望代码可以重用，可以简单地引用和添加各种各样的依赖到我们的项目。 1.症状 如果按照以往的以页面为单位的开发，会导致很多问题，类似依赖管理、命名冲突等等问题。 命名冲突是最常见的问题，描述如下： //在util.js中 12function log(message)&#123;&#125; //在logger.js中 12function log(message)&#123; &#125; 因此如果在页面的script标签同时依赖这两个文件的时候就会产生冲突，导致后面的函数会被覆盖。从而可能产生一些预料之外的结果。 传统的解决方案是使用命名空间： //在util.js中 12function util.log(message)&#123;&#125; //在logger.js中 12function logger.log(message)&#123; &#125; 这样带来的显而易见的问题是：所有的代码会变得冗余并且编写困难 2 解决（从旧到新） 思想 在Java中有一个重要的概念——package，逻辑上相关的代码组织到同一个包内，包内是一个相对独立的王国，不用担心命名冲突什么的。 那么外部如果使用呢？直接import对应的package即可import java.util.ArrayList; 遗憾的是JavaScript在设计时定位原因，没有提供类似的功能，javascript，甚至没有类的概念，更不用说模块(module)了。 前端开发人员需要模拟出类似的功能，来隔离、组织复杂的JavaScript代码，我们称为模块化。 一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，各行其是就都乱套了 2.1 函数封装函数一个功能就是实现特定逻辑的一组语句打包，在一个文件里面编写几个相关函数就是最开始的模块了 缺点：就如1所讲，污染了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间没什么关系。 2.2 对象对象为了解决上面问题，对象的写法应运而生，可以把所有的模块成员封装在一个对象中 12345678910111213var myModule = &#123; var1: 1, var2: 2, fn1: function()&#123; &#125;, fn2: function()&#123; &#125;&#125; 这样我们在希望调用模块的时候引用对应文件，然后 1myModule.fn2(); 这样避免了变量污染，只要保证模块名唯一即可，同时同一模块内的成员也有了关系 缺点：看似不错的解决方案，但是也有缺陷，外部可以随意修改内部成员 1myModel.var1 = 100; 这样就会产生意外的安全问题 2.3 立即执行函数可以通过立即执行函数，来达到隐藏细节的目的 1234567891011121314151617var myModule = (function()&#123; var var1 = 1; var var2 = 2; function fn1()&#123; &#125; function fn2()&#123; &#125; return &#123; fn1: fn1, fn2: fn2 &#125;;&#125;)(); 这样在模块外部无法修改我们没有暴露出来的变量、函数。 上述做法就是我们模块化的基础，目前，通行的JavaScript模块规范主要有两种：CommonJS和AMD和CMD 首先最先登场的是CommonJs 3 CommonJS我们先从CommonJS谈起，因为在网页端没有模块化编程，但也可以工作下去；但在服务器端却一定要有模块，所以虽然JavaScript在web端发展这么多年，第一个流行的模块化规范却由服务器端的JavaScript应用带来，CommonJS规范是由NodeJS发扬光大，这标志着JavaScript模块化编程正式登上舞台。 3.1 定义模块根据CommonJS规范， 一个单独的文件就是一个模块。 每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性 模块输出： 模块只有一个出口，module.exports对象，我们需要把模块希望输出的内容放入该对象 加载模块： 加载模块使用require方法，该方法读取一个文件并执行，返回文件内部的module.exports对象 看个例子 12345678910111213141516171819202122//模块定义 myModel.jsvar name = 'Byron';function printName()&#123; console.log(name);&#125;function printFullName(firstName)&#123; console.log(firstName + name);&#125;module.exports = &#123; printName: printName, printFullName: printFullName&#125;//加载模块var nameModule = require('./myModel.js');nameModule.printName(); 3.2 CommonJs缺点： 尴尬的浏览器仔细看上面的代码，==会发现require是同步的==。模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。 这在服务器端实现很简单也很自然，然而， 想在浏览器端实现问题却很多。 因为浏览器端，加载JavaScript最佳、最容易的方式是在document中插入script 标签。==但脚本标签script天生异步，传统CommonJS模块在浏览器环境中无法正常加载==。 解决思路之一是，开发一个服务器端组件，对模块代码作静态分析，将模块与它的依赖列表一起返回给浏览器端。 这很好使，但需要服务器安装额外的组件，并因此要调整一系列底层架构。 另一种解决思路是，用一套标准模板来封装模块定义，但是对于模块应该怎么定义和怎么加载，又产生的分歧： 总结CommonJs适合服务器端，比如node，不适合浏览器 4 AMDAMD即Asynchromous Module Defination，中文是异步模块定义的意思，他就是浏览器端模块化开发的规范。 由于不是JavaScript原生支持，使用AMD规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎RequireJS，实际上现有RequireJS再有的AMD。 RequireJS = AMD requireJS主要解决两个问题 1.多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器 2.js加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应时间越长 4.1 定义模块看一个使用requireJS的例子 // 定义模块 ==myModule.js== 12345678910define(['dependency'], function()&#123; var name = 'Byron'; function printName()&#123; console.log(name); &#125; return &#123; printName: printName &#125;;&#125;); // 加载模块 123require(['myModule'], function (my)&#123; my.printName();&#125;); 4.2 语法requireJS定义了一个函数 define，它(define)是全局变量，用来定义模块。 4.2.1 define，它是全局变量，用来定义模块1define(id?, dependencies?, factory); id：可选参数，用来定义模块的标识，如果没有提供该参数，脚本文件名（去掉拓展名） dependencies：是一个当前模块依赖的模块名称数组 factory：工厂方法，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值 4.2.2 在页面上使用require函数加载模块1require([dependencies], function()&#123;&#125;); require()函数接受两个参数 第一个参数是一个数组，表示所依赖的模块 第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块 require()函数在加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。 5 CMDCMD即Common Module Definition，通过模块定义。AMD有个RequireJS，CMD有个浏览器实现的SeaJS，SeaJS要解决的问题和RequireJS一样，只不过在模块定义方式和模块加载（可以说运行、解析）时机上有所不同。 SeaJS = CMD AMD和CMD的区别在于语法以及加载 5.1 定义模块看一个使用CMD的例子 // 定义模块 myModule.js 1234define(function(require, exports, module) &#123; var $ = require('jquery.js') $('div').addClass('active');&#125;); // 加载模块 12 seajs.use(['myModule.js'], function(my)&#123;&#125;); 5.2 语法Sea.js 推崇一个模块一个文件，遵循统一的写法 （1）define 1define(id?, deps?, factory) CMD推崇 一个文件一个模块，所以经常就用文件名作为模块id CMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写。 factory有三个参数 1function(require, exports, module) require，require是factory函数的第一个参数 1require（id） require是一个方法，接受模块标识作为唯一的参数，用来获取其他模块提供的接口 exports，exports是一个对象，用来向外提供模块的接口 module，module是一个对象，上面存储了与当前模块相关联的属性和方法 对比 AMD与CMD区别关于这两个的区别网上可以搜出一堆文章，简单总结一下 最明显的区别就是在模块定义时对依赖的处理不同 （1）AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块 （2）CMD推崇就近依赖，只有在用到某个模块的时候再去require 这种区别各有优劣，只是语法上的差距，而且requireJS和SeaJS都支持对方的写法 AMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同 很多人说requireJS是异步加载模块，SeaJS是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过AMD依赖前置，js可以方便知道依赖模块是谁，立即加载，而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略 为什么我们说两个的区别是依赖模块执行时机不同，为什么很多人认为ADM是异步的，CMD是同步的（除了名字的原因。。。） 同样都是异步加载模块，AMD在加载模块完成后就会执行改模块，所有模块都加载执行完后会进入require的回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行 CMD加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到require语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的 这也是很多人说AMD用户体验好，因为没有延迟，依赖模块提前执行了，CMD性能好，因为只有用户需要的时候才执行的原因 参考 http://www.cnblogs.com/dolphinX/p/4381855.html","categories":[{"name":"总结 工作","slug":"总结-工作","permalink":"https://nidaye125.github.io/categories/总结-工作/"}],"tags":[{"name":"模块化","slug":"模块化","permalink":"https://nidaye125.github.io/tags/模块化/"}]},{"title":"redux","slug":"redux","date":"2018-08-24T02:00:30.000Z","updated":"2018-12-22T05:22:15.295Z","comments":true,"path":"2018/08/24/redux/","link":"","permalink":"https://nidaye125.github.io/2018/08/24/redux/","excerpt":"有一篇redux的吐槽写的甚好，翻译一下","text":"有一篇redux的吐槽写的甚好，翻译一下 1.前言mirrorA simple and powerful React framework with minimal API and zero boilerplate. (Inspired by dva and jumpstate)一款简洁、高效、易上手的 React 框架。（Inspired by dva and jumpstate） Painless React and Redux. Why? We love React and Redux.我们热爱 React 和 Redux。A typical React/Redux app looks like the following:一个典型的 React/Redux 应用看起来像下面这样： An actions/ directory to manually create all action types (or action creators) 一个 actions/ 目录用来手动创建所有的 action type（或者 action creator） A reducers/ directory and tons of switch clause to capture all action types 一个 reducers/ 目录和超级多的 switch语句 来捕获所有的 action type Apply middlewares to handle async actions 必须要依赖 middleware 才能处理 异步 action； Explicitly invoke dispatch method to dispatch all actions 显示调用 dispatch 方法来 dispatch 所有的 action； Manually create history to router and/or sync with store 手动创建 history 对象关联路由组件，可能还需要与 store 同步； Invoke methods in history or dispatch actions to programmatically changing routes调用 history 上的方法或者 dispatch action 来手动更新路由； The problem? Too much boilerplates and a little bit tedious. 存在的问题？太多的 样板文件以及繁琐甚至重复的劳动。 In fact, most part of the above steps could be simplified. Like, create actions and reducers in a single method, or dispatch both sync and async actions by simply invoking a function without extra middleware, or define routes without caring about history, etc.实际上，上述大部分操作都是可以简化的。比如，在单个 API 中创建所有的 action 和 reducer；比如，简单地调用一个函数来 dispatch 所有的同步和异步 action，且不需要额外引入 middleware；再比如，使用路由的时候只需要关心定义具体的路由，不用去关心 history 对象，等等。 That’s exactly what Mirror does, encapsulates the tedious or repetitive work in very few APIs to offer a high level abstraction with efficiency and simplicity, and without breaking the pattern.这正是 Mirror 的使命，用极少数的 API 封装所有繁琐甚至重复的工作，提供一种简洁高效的更高级抽象，同时保持原有的开发模式。 2.超级重点，样板文件 2-1 Actions 2-2 Action Creators 2-3 Generating Action Creators 2-4 Async Action Creators 2-5 Reducers 2-6 Generating Reducers Reducing Boilerplate Redux is in part inspired by Flux, and the most common complaint about Flux is how it makes you write a lot of boilerplate. In this recipe, we will consider how Redux lets us choose how verbose we’d like our code to be, depending on personal style, team preferences, longer term maintainability, and so on. Redux的部分是受Flux启发的，关于Flux最常见的抱怨就是它让你写出很多样板文件的。在下面的介绍中，我们将意识到Redux是如何让我们选择使用这种超级冗长的代码，当然这种选择也取决于个人风格、团队偏好、长期可维护性等等。 2-1 Actions Actions are plain objects describing what happened in the app, and serve as the sole way to describe an intention to mutate the data. It’s important that actions being objects you have to dispatch is not boilerplate, but one of the fundamental design choices of Redux. Actions是一个描述app中发生了什么的普通对象（变量），也是唯一一种方式来描述数据意图变化。要意识到是你必须dispatch的action，并不是无用的模板，而是redux基本设计规则 There are frameworks claiming to be similar to Flux, but without a concept of action objects. In terms of being predictable, this is a step backwards from Flux or Redux. If there are no serializable plain object actions, it is impossible to record and replay user sessions, or to implement hot reloading with time travel. If you’d rather modify data directly, you don’t need Redux. 有些框架声称类似Flux，但是没有action概念。就可预测而言，这些框架相比Flux和react是一种倒退。如果没有action对象，是不可能记录和重演用户会话，也不可能实行热重载。如果你宁愿选择直接修改数据，则不需要使用Redux。 Actions look like this: { type: ‘ADD_TODO’, text: ‘Use Redux’ } {type: ‘REMOVE_TODO’, id: 42 } { type: ‘LOAD_ARTICLE’, response: { …} } It is a common convention that actions have a constant type that helps reducers (or Stores in Flux) identify them. We recommend that you use strings and not Symbols for action types, because strings are serializable, and by using Symbols you make recording and replaying harder than it needs to be. 约定习俗，actions有一个type（是个常量），目的为了帮助reducers（或者Stores in Flux）识别他们。我们建议将type定义成string类型或者不是symbols类型，因为strings are serializable,并且使用symbols类型会让你记录或者重演的行为变得更困难 In Flux, it is traditionally thought that you would define every action type as a string constant: const ADD_TODO = ‘ADD_TODO’const REMOVE_TODO = ‘REMOVE_TODO’const LOAD_ARTICLE = ‘LOAD_ARTICLE’ 在Flux，一般都会把type定义成一个字符串常量 Why is this beneficial? It is often claimed that constants are unnecessary, and for small projects, this might be correct. For larger projects, there are some benefits to defining action types as constants: 为什么好呢？在小项目中，常量声明不是必须的，但是在大项目中，type定义成常量的好处如下： It helps keep the naming consistent because all action types are gathered in a single place. 它有助于保持命名的一致性，因为所有操作类型都集中在一个地方。 Sometimes you want to see all existing actions before working on a new feature. It may be that the action you need was already added by somebody on the team, but you didn’t know. 有时再添加新特性之前需要查看一下所有已存在的actions。也有可能你需要新增的action，你的队友已经添加但是你不知道 The list of action types that were added, removed, and changed in a Pull Request helps everyone on the team keep track of scope and implementation of new features. action的type列表，删除添加修改等操作很容易跟踪到 If you make a typo when importing an action constant, you will get undefined. Redux will immediately throw when dispatching such an action, and you’ll find the mistake sooner. 当你引入一个action常量的时候出现书写错误，那么你会得到undefined。当dispatch这个action的时候，redux立即报出问题，你就会很快地发现问题。 It is up to you to choose the conventions for your project. You may start by using inline strings, and later transition to constants, and maybe later group them into a single file. Redux does not have any opinion here, so use your best judgment. 这取决于你，在项目中使用约定习俗 。你可以使用inline strings, and later transition to constants 或者把他们都放入一个单独文件中。redux在这里没做任何要求。（把它们放入一个单独文件中使我们项目中使用方式，可见diwork的配图） 2-2 Action Creators It is another common convention that, instead of creating action objects inline in the places where you dispatch the actions, you would create functions generating them. 另外一个约定习俗是：不要在你要dispatch action的地方内联式地创建action，而是创建些生成他们的函数更好 For example, instead of calling dispatch with an object literal: 比如不要dipatch一个字面量对象 // somewhere in an event handler dispatch({ type: &apos;ADD_TODO&apos;, text: &apos;Use Redux&apos; }) You might write an action creator in a separate file, and import it into your component:你最好在一个独立文件中写个action creator，然后import进来 actionCreators.js export function addTodo(text) { return { type: &apos;ADD_TODO&apos;, text } } AddTodo.js import { addTodo } from &apos;./actionCreators&apos; // somewhere in an event handler dispatch(addTodo(&apos;Use Redux&apos;)) 其实action creators就是return 一个action(一个action表现形式是type+其他内容)。就是把action封装下，在action的周围可以加上其他逻辑，如下： Action creators have often been criticized as boilerplate. Well, you don’t have to write them! You can use object literals if you feel this better suits your project. There are, however, some benefits for writing action creators you should know about. Action creator经常被批评为是模板文件。好吧，实际上你可以不写他们。如果你觉得合适，你可以使用字面量对象。但是关于action creator的好处你需要知道一下 Let’s say a designer comes back to us after reviewing our prototype, and tells us that we need to allow three todos maximum. We can enforce this by rewriting our action creator to a callback form with redux-thunk middleware and adding an early exit: 假设一个设计师在检查完原型之后回来告诉我们，我们需要允许最多三个任务。我们可以通过使用redux-thunk中间件将我们的action creator重写回调，并添加一个提前退出来实现这一点: function addTodoWithoutCheck(text) { return { type: &apos;ADD_TODO&apos;, text } } export function addTodo(text) { // This form is allowed by Redux Thunk middleware // described below in “Async Action Creators” section. return function (dispatch, getState) { if (getState().todos.length === 3) { // Exit early return } dispatch(addTodoWithoutCheck(text)) } } We just modified how the addTodo action creator behaves, completely invisible to the calling code. We don’t have to worry about looking at each place where todos are being added, to make sure they have this check. Action creators let you decouple additional logic around dispatching an action, from the actual components emitting those actions. It’s very handy when the application is under heavy development, and the requirements change often. 我们只需要修改addTodo这个action creator，完全可以忽略调用这个函数的任何地方（因此不用找到所有调用这个函数的地方添加任何额外操作）。action creator把dispatch an action周围的附加逻辑与发出这些动作的实际组件分离开来。在繁重的开发阶段以及需求经常变动的情况下，这样开发变得非常敏捷 2-3 Generating Action Creators Some frameworks like Flummox generate action type constants automatically from the action creator function definitions. The idea is that you don’t need to both define ADD_TODO constant and addTodo() action creator. Under the hood, such solutions still generate action type constants, but they’re created implicitly so it’s a level of indirection and can cause confusion. We recommend creating your action type constants explicitly. 一些框架像Flummox可以通过action creator函数来生成action的type常量。这种想法意味着你不需要同时定义ADD_TODO 常量和 addTodo()这个 action creator。但是实质上还是需要生成action type常量，并且这种隐式创建会导致混淆。我们建议显式地创建action type Writing simple action creators can be tiresome and often ends up generating redundant boilerplate code:编写简单的action creator是非常累人的，并且常常会生成冗余的样板代码: export function addTodo(text) { return { type: &apos;ADD_TODO&apos;, text } } export function editTodo(id, text) { return { type: &apos;EDIT_TODO&apos;, id, text } } export function removeTodo(id) { return { type: &apos;REMOVE_TODO&apos;, id } } You can always write a function that generates an action creator: function makeActionCreator(type, ...argNames) { return function (...args) { const action = { type } argNames.forEach((arg, index) =&gt; { action[argNames[index]] = args[index] }) return action } } const ADD_TODO = &apos;ADD_TODO&apos; const EDIT_TODO = &apos;EDIT_TODO&apos; const REMOVE_TODO = &apos;REMOVE_TODO&apos; export const addTodo = makeActionCreator(ADD_TODO, &apos;text&apos;) export const editTodo = makeActionCreator(EDIT_TODO, &apos;id&apos;, &apos;text&apos;) export const removeTodo = makeActionCreator(REMOVE_TODO, &apos;id&apos;) //上面的这个函数会返回来 addTodo(&apos;hahah&apos;) {type: &quot;ADD_TODO&quot;, text: &quot;hahah&quot;} 上面代码真的很不错，可以学习一下，闭包知识也有用到，type，argNames被保存了。注意返回的是一个函数 There are also utility libraries to aid in generating action creators, such as redux-act and redux-actions. These can help reduce boilerplate code and enforce adherence to standards such as Flux Standard Action (FSA). 有一些公共库帮助生成action creators，比如redux-act 和redux-actions . 这样可以减少模板代码和强制遵循FSA规范 2-4 Async Action Creators 异步的action creators Middleware lets you inject custom logic that interprets every action object before it is dispatched. Async actions are the most common use case for middleware. Middleware 允许您注入自定义逻辑在每个action对象中 before it is dispatched。异步操作是middleware最常见的用例。 Without any middleware, dispatch only accepts a plain object, so we have to perform AJAX calls inside our components: 没有middleware，dispatch只接受普通对象，因此我们不得不在组件中执行AJAX调用: actionCreators.js export function loadPostsSuccess(userId, response) { return { type: &apos;LOAD_POSTS_SUCCESS&apos;, userId, response } } export function loadPostsFailure(userId, error) { return { type: &apos;LOAD_POSTS_FAILURE&apos;, userId, error } } export function loadPostsRequest(userId) { return { type: &apos;LOAD_POSTS_REQUEST&apos;, userId } } UserInfo.js import { Component } from &apos;react&apos; import { connect } from &apos;react-redux&apos; import { loadPostsRequest, loadPostsSuccess, loadPostsFailure } from &apos;./actionCreators&apos; class Posts extends Component { loadData(userId) { // Injected into props by React Redux `connect()` call: // 通过调用React Redux `connect()`注入了props const { dispatch, posts } = this.props if (posts[userId]) { // There is cached data! Don&apos;t do anything. // 是否有缓存数据 return } // Reducer can react to this action by setting // `isFetching` and thus letting us show a spinner. // 显示加载 dispatch(loadPostsRequest(userId)) // Reducer can react to these actions by filling the // `users`. fetch(`http://myapi.com/users/${userId}/posts`).then( response =&gt; dispatch(loadPostsSuccess(userId, response)), error =&gt; dispatch(loadPostsFailure(userId, error)) ) } componentDidMount() { this.loadData(this.props.userId) } componentWillReceiveProps(nextProps) { if (nextProps.userId !== this.props.userId) { this.loadData(nextProps.userId) } } render() { if (this.props.isFetching) { return &lt;p&gt;Loading...&lt;/p&gt; } const posts = this.props.posts.map(post =&gt; &lt;Post post={post} key={post.id} /&gt; ) return &lt;div&gt;{posts}&lt;/div&gt; } } export default connect(state =&gt; ({ posts: state.posts, isFetching: state.isFetching }))(Posts) However, this quickly gets repetitive because different components request data from the same API endpoints. Moreover, we want to reuse some of this logic (e.g., early exit when there is cached data available) from many components. 然而这很快就会重复因为不同的组件使用相同api来请求数据，而且，我们希望重用许多组件中的一些逻辑（比如缓存数据存在的时候提前退出）（如果有多个组件，需要重写很多次fetch请求呢） Middleware lets us write more expressive, potentially async action creators. It lets us dispatch something other than plain objects, and interprets the values. For example, middleware can “catch” dispatched Promises and turn them into a pair of request and success/failure actions. Middleware使我们能够编写更有表现力的、潜在的异步action creator。它允许我们dispatch something 而不是普通对象，并interprets the values。例如，middleware可以“捕获”已发出的promise，并将它们转换为一对请求+成功/失败操作。 The simplest example of middleware is redux-thunk. “Thunk” middleware lets you write action creators as “thunks”, that is, functions returning functions. This inverts the control: you will get dispatch as an argument, so you can write an action creator that dispatches many times. middleware最简单的例子就是redux-thunk。thunk是允许你将action creators作为thunks，就是函数返回函数。这种反转控件，你可以将dispatch作为参数，因为写一个可以dispatch很多次的action creator Note Thunk middleware is just one example of middleware. Middleware isnot about “letting you dispatch functions”. It’s about letting youdispatch anything that the particular middleware you use knows how tohandle. Thunk middleware adds a specific behavior when you dispatchfunctions, but it really depends on the middleware you use. Thunk middleware只是一个简单例子，Middleware不是让你‘dispatch functions’。他是让你dispatch任何Middleware知道如何处理的事情。Thunk Middleware可以在你dispatchfunctions之前添加一些特殊操作，不过这一切取决你你使用的Middleware Consider the code above rewritten with redux-thunk: actionCreators.js export function loadPosts(userId) { // Interpreted by the thunk middleware: // 交给thunk Middleware 解释 return function (dispatch, getState) { const { posts } = getState() if (posts[userId]) { // There is cached data! Don&apos;t do anything. return } dispatch({ type: &apos;LOAD_POSTS_REQUEST&apos;, userId }) // Dispatch vanilla actions asynchronously fetch(`http://myapi.com/users/${userId}/posts`).then( response =&gt; dispatch({ type: &apos;LOAD_POSTS_SUCCESS&apos;, userId, response }), error =&gt; dispatch({ type: &apos;LOAD_POSTS_FAILURE&apos;, userId, error }) ) } } UserInfo.js import { Component } from &apos;react&apos; import { connect } from &apos;react-redux&apos; import { loadPosts } from &apos;./actionCreators&apos; class Posts extends Component { componentDidMount() { this.props.dispatch(loadPosts(this.props.userId)) } componentWillReceiveProps(nextProps) { if (nextProps.userId !== this.props.userId) { this.props.dispatch(loadPosts(nextProps.userId)) } } render() { if (this.props.isFetching) { return &lt;p&gt;Loading...&lt;/p&gt; } const posts = this.props.posts.map(post =&gt; &lt;Post post={post} key={post.id} /&gt; ) return &lt;div&gt;{posts}&lt;/div&gt; } } export default connect(state =&gt; ({ posts: state.posts, isFetching: state.isFetching }))(Posts) This is much less typing! If you’d like, you can still have “vanilla” action creators like loadPostsSuccess which you’d use from a container loadPosts action creator. 更少的书写。如果你喜欢，你可以有vanilla action creators，如loadPostsSuccess（其实就是把第一个UserInfo.js中loadData提出来加工一下改为loadPosts） Finally, you can write your own middleware. Let’s say you want to generalize the pattern above and describe your async action creators like this instead:最后你可以编写自己的Middleware。如果你想要推广上面的模式，可以这样的描述你的异步action creators export function loadPosts(userId) { return { // Types of actions to emit before and after定义Types types: [&apos;LOAD_POSTS_REQUEST&apos;, &apos;LOAD_POSTS_SUCCESS&apos;, &apos;LOAD_POSTS_FAILURE&apos;], // Check the cache (optional):检查缓存 shouldCallAPI: state =&gt; !state.posts[userId], // Perform the fetching:执行fetch callAPI: () =&gt; fetch(`http://myapi.com/users/${userId}/posts`), // Arguments to inject in begin/end actions 参数注入在开始或者结束的actions payload: { userId } } } The middleware that interprets such actions could look like this: Middleware这样定义actions function callAPIMiddleware({ dispatch, getState }) { return next =&gt; action =&gt; { const { types, callAPI, shouldCallAPI = () =&gt; true, payload = {} } = action if (!types) { // Normal action: pass it on return next(action) } if ( !Array.isArray(types) || types.length !== 3 || !types.every(type =&gt; typeof type === &apos;string&apos;) ) { throw new Error(&apos;Expected an array of three string types.&apos;) } if (typeof callAPI !== &apos;function&apos;) { throw new Error(&apos;Expected callAPI to be a function.&apos;) } if (!shouldCallAPI(getState())) { return } const [requestType, successType, failureType] = types dispatch( Object.assign({}, payload, { type: requestType }) ) return callAPI().then( response =&gt; dispatch( Object.assign({}, payload, { response, type: successType }) ), error =&gt; dispatch( Object.assign({}, payload, { error, type: failureType }) ) ) } } After passing it once to applyMiddleware(…middlewares), you can write all your API-calling action creators the same way: 只要使用一次applyMiddleware(…middlewares), 您可以用同样的方式编写所有api调用的action creators export function loadPosts(userId) { return { types: [&apos;LOAD_POSTS_REQUEST&apos;, &apos;LOAD_POSTS_SUCCESS&apos;, &apos;LOAD_POSTS_FAILURE&apos;], shouldCallAPI: state =&gt; !state.posts[userId], callAPI: () =&gt; fetch(`http://myapi.com/users/${userId}/posts`), payload: { userId } } } export function loadComments(postId) { return { types: [ &apos;LOAD_COMMENTS_REQUEST&apos;, &apos;LOAD_COMMENTS_SUCCESS&apos;, &apos;LOAD_COMMENTS_FAILURE&apos; ], shouldCallAPI: state =&gt; !state.comments[postId], callAPI: () =&gt; fetch(`http://myapi.com/posts/${postId}/comments`), payload: { postId } } } export function addComment(postId, message) { return { types: [ &apos;ADD_COMMENT_REQUEST&apos;, &apos;ADD_COMMENT_SUCCESS&apos;, &apos;ADD_COMMENT_FAILURE&apos; ], callAPI: () =&gt; fetch(`http://myapi.com/posts/${postId}/comments`, { method: &apos;post&apos;, headers: { Accept: &apos;application/json&apos;, &apos;Content-Type&apos;: &apos;application/json&apos; }, body: JSON.stringify({ message }) }), payload: { postId, message } } } 2-5 Reducers Redux reduces the boilerplate of Flux stores considerably by describing the update logic as a function. A function is simpler than an object, and much simpler than a class. Redux通过将更新逻辑描述为函数，大大减少了Flux样板。函数比对象简单，比类简单得多。 Consider this Flux store: const _todos = [] const TodoStore = Object.assign({}, EventEmitter.prototype, { getAll() { return _todos } }) AppDispatcher.register(function (action) { switch (action.type) { case ActionTypes.ADD_TODO: const text = action.text.trim() _todos.push(text) TodoStore.emitChange() } }) export default TodoStore With Redux, the same update logic can be described as a reducing function: export function todos(state = [], action) { switch (action.type) { case ActionTypes.ADD_TODO: const text = action.text.trim() return [...state, text] default: return state } } The switch statement is not the real boilerplate. The real boilerplate of Flux is conceptual: the need to emit an update, the need to register the Store with a Dispatcher, the need for the Store to be an object (and the complications that arise when you want a universal app)。 这是对Flux的解析：Switch语句不是真正冗余，Flux真正冗余的是概念：需要emit an update需要用一个dispatcher来注册store（就是store需要被注册在一个dispatcher上）需要store是个对象（当你想要一个通用app的时候这就会非常的复杂） It’s unfortunate that many still choose Flux framework based on whether it uses switch statements in the documentation. If you don’t like switch, you can solve this with a single function, as we show below.愚蠢的是，许多人仍然根据文档中是否使用switch语句来选择Flux框架。如果您不喜欢switch，可以使用一个函数来解决这个问题，如下所示。 2-6 Generating Reducers Let’s write a function that lets us express reducers as an object mapping from action types to handlers. For example, if we want our todos reducers to be defined like this: 让我们编写一个函数，让我们将reducers表述为一个对象映射，映射关系是action type 映射到 handlers。例如，如果我们希望我们的todos是这样定义的: export const todos = createReducer([], { [ActionTypes.ADD_TODO]: (state, action) =&gt; { const text = action.text.trim() return [...state, text] } }) 越来越像我们项目中用到了这种映射关系去掉了switchWe can write the following helper to accomplish this:可以使用下面的帮助来完成 function createReducer(initialState, handlers) { return function reducer(state = initialState, action) { if (handlers.hasOwnProperty(action.type)) { return handlers[action.type](state, action) } else { return state } } } This wasn’t difficult, was it? Redux doesn’t provide such a helper function by default because there are many ways to write it. Maybe you want it to automatically convert plain JS objects to Immutable objects to hydrate the server state. Maybe you want to merge the returned state with the current state. There may be different approaches to a “catch all” handler. All of this depends on the conventions you choose for your team on a specific project.The Redux reducer API is (state, action) =&gt; newState, but how you create those reducers is up to you. 这并不难，不是吗? Redux默认情况下不提供这样的帮助helper，因为有很多方法可以编写它。也许您希望它自动将普通JS对象转换为不可变对象，以适应服务器状态。也许您希望将返回的状态与当前状态合并。也有很多不同的方式来使用‘catch all’handler。所有这些都取决于您根据特定项目中选择的约定。 Redux reducer API是(state, action) =&gt; newState，但是如何创建这些reducer取决于您。 action 、 action creators 、 reducer 的区别 action = type + new value action creators = logic + action reducer = state + action creators 3.diworkdiwork工作台的redux如下","categories":[{"name":"翻译","slug":"翻译","permalink":"https://nidaye125.github.io/categories/翻译/"}],"tags":[{"name":"redux","slug":"redux","permalink":"https://nidaye125.github.io/tags/redux/"}]}]}