{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4bfc4692582d3ff70dc839cce4a37c5dbed519b6","modified":1531562764052},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1531563287265},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1531563287265},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1531563287266},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1531563287266},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1531563287266},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1531563287266},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1531563287266},{"_id":"themes/yilia/_config.yml","hash":"739a5a1671affdd11b3c87e3a0dfcf8172f6e963","modified":1531566938876},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1531563287276},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1531563287298},{"_id":"source/_posts/git.md","hash":"8ff6ab7c35ae2f4e615481777af741c3a25b4247","modified":1531619262634},{"_id":"source/_posts/hello-world.md","hash":"74b4da7c9fefde47f6d672f8e0e1bc8e47a9750c","modified":1529930651107},{"_id":"source/_posts/react_hoc_1.md","hash":"fc77d5e61c96a93a8dc6f432ee51cce204e1d3d0","modified":1531564358950},{"_id":"source/_posts/react_hoc_2.md","hash":"8128ffeba544db0632b57854eee663b0de32ce59","modified":1531564423407},{"_id":"source/whatIFeel/index.ejs","hash":"fc8db044a07565c3149a956ed10f2224859c3934","modified":1531565777781},{"_id":"source/whatIFeel/ins.css","hash":"c69183cde47e77a6a7db78171ea94bfcf7a1f855","modified":1531566253511},{"_id":"source/whatIFeel/ins.js","hash":"cf9140c46b52f128800cb8c2b90067bee1f1fde9","modified":1531565936982},{"_id":"source/whatIFeel/ins.json","hash":"636600e403a8fd2c3e1d7f66d5cf29aae27c30b2","modified":1531565569557},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"1efc9d034adf6456e816fcbb20023807ca64bbd0","modified":1531563324594},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1531563287256},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1531563324610},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1531563287258},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1531563270763},{"_id":"themes/yilia/.git/index","hash":"716ba7f7a1172f4cbe3186c2dabf4720bb695cde","modified":1531563287299},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1531563287254},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1531563287267},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1531563287267},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1531563287267},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1531563287267},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1531563287267},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1531563287267},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1531563287268},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1531563287275},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1531563287275},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1531563287275},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1531563287275},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1531563287275},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1531563287276},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1531563287276},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1531563287295},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1531563287297},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1531563287276},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1531563287292},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531563287274},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1531563287296},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1531563287297},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1531563270766},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1531563270764},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1531563270767},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1531563270768},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1531563270765},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1531563270768},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1531563270765},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1531563270766},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1531563270767},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1531563270768},{"_id":"themes/yilia/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1531563270763},{"_id":"themes/yilia/.git/logs/HEAD","hash":"dc44a64b0b437aa0d7519371060276abe6d2e2a7","modified":1531563287257},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1531563287268},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1531563287268},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1531563287268},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1531563287268},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1531563287269},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1531563287269},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1531563287269},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"be073eaa2ed909d2f66f36d3436096eae8c554c8","modified":1531567526442},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1531563287269},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1531563287269},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1531563287270},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1531563287270},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1531563287270},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1531563287270},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1531563287274},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1531563287274},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1531563287292},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1531563287292},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1531563287292},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1531563287293},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1531563287293},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1531563287293},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1531563287293},{"_id":"themes/yilia/source/img/avatar.png","hash":"1547f25927881f9b582fcb2a8d932ff92d94c398","modified":1531566864104},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1531563287294},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1531563287294},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1531563287277},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1531563287277},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1531563287277},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1531563287277},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1531563287278},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1531563287278},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1531563287278},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1531563287278},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1531563287279},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1531563287281},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1531563287283},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1531563287284},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1531563287284},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1531563287284},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1531563287285},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1531563287285},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1531563287285},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1531563287286},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1531563287286},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1531563287286},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1531563287287},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1531563287287},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1531563287287},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1531563287287},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1531563287287},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1531563287288},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1531563287288},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1531563287289},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1531563287289},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1531563287289},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1531563287289},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1531563287290},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1531563287290},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1531563287290},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1531563287290},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1531563287290},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1531563287291},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1531563287291},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1531563287291},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1531563287274},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1531563287257},{"_id":"themes/yilia/.git/objects/pack/pack-4ea115ea551bddb7dfbba8549e99744c338c11f5.idx","hash":"fa67089ee1ad846ff7249deebdea253cb0b37339","modified":1531563287239},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1531563287270},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1531563287271},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1531563287271},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1531563287271},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1531563287271},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1531563287272},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1531563287272},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1531563287272},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1531563287272},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1531563287273},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1531563287279},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1531563287279},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1531563287280},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1531563287280},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1531563287281},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1531563287281},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1531563287282},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1531563287282},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1531563287283},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1531563287284},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1531563287285},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1531563287285},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"dc44a64b0b437aa0d7519371060276abe6d2e2a7","modified":1531563287258},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1531563287256},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"dc44a64b0b437aa0d7519371060276abe6d2e2a7","modified":1531563287256},{"_id":"themes/yilia/.git/objects/pack/pack-4ea115ea551bddb7dfbba8549e99744c338c11f5.pack","hash":"73e65d3196952cb93c5f99df243f4ac69f85c5e7","modified":1531563287237},{"_id":"public/whatIFeel/ins.css","hash":"c69183cde47e77a6a7db78171ea94bfcf7a1f855","modified":1531619278732},{"_id":"public/whatIFeel/ins.js","hash":"cf9140c46b52f128800cb8c2b90067bee1f1fde9","modified":1531619278800},{"_id":"public/whatIFeel/ins.json","hash":"071511a7dded0951f6d5d4f4e1cfe8113f73c5ef","modified":1531619278809},{"_id":"public/content.json","hash":"a141d70e3f89d6403e2859e87b833f509af3a0c6","modified":1531619278810},{"_id":"public/whatIFeel/index.html","hash":"e8647d86db25637b813d02ff6ca861f634320f1d","modified":1531619278812},{"_id":"public/2018/07/15/git/index.html","hash":"b593b8ab046343e2b03faea1133f76bdc5f56f34","modified":1531619278812},{"_id":"public/2018/06/25/react_hoc_2/index.html","hash":"87cce523fab878e0b91e84b7ac350788bac23032","modified":1531619278812},{"_id":"public/2018/06/25/react_hoc_1/index.html","hash":"1fa6bf1eb615c837dd835de155126510f3173cb2","modified":1531619278812},{"_id":"public/2018/06/25/hello-world/index.html","hash":"461edf385cc04b41c4a3bfe8d65d9cc2de0c7f77","modified":1531619278813},{"_id":"public/archives/index.html","hash":"82c952548d9d1f25d406bcf1b2334fa1def5091b","modified":1531619278813},{"_id":"public/archives/2018/index.html","hash":"da0f7bbbe43e61bf1b4b5d0cc066c6e5a846e53b","modified":1531619278813},{"_id":"public/archives/2018/06/index.html","hash":"c21caef9294c1c302aa7d9909d76554316b7114f","modified":1531619278813},{"_id":"public/archives/2018/07/index.html","hash":"e86af2f2676899a79e6a6fe359ccddb3ae1ab2fe","modified":1531619278813},{"_id":"public/index.html","hash":"6b53e6a3fd74ab4c598f3c0ad99ef9c8d6965861","modified":1531619278813},{"_id":"public/tags/react/index.html","hash":"364eb5b7d304a890e60b1d10ab090da54a01af13","modified":1531619278813},{"_id":"public/tags/hoc-react/index.html","hash":"3df0f874cb4aecb9640a4aa278db30e7c2404835","modified":1531619278813},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1531619278815},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1531619278815},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1531619278815},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1531619278816},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1531619278816},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1531619278816},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1531619278816},{"_id":"public/img/avatar.png","hash":"1547f25927881f9b582fcb2a8d932ff92d94c398","modified":1531619278816},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1531619278816},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1531619278816},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1531619278820},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1531619278820},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1531619278820},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1531619278820}],"Category":[],"Data":[],"Page":[{"layout":"post","slug":"WhatIFeel","title":"WhatIFeel","noDate":"true","comments":0,"_content":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<ul class=\"feel-content\" id=\"feelContent\">\n    <li class=\"content-item\">\n        <span class=\"content-time\"></span>\n        <span class=\"content-spec\"></span>\n    </li>\n</ul>\n\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","source":"whatIFeel/index.ejs","raw":"---\nlayout: post\nslug: \"WhatIFeel\"\ntitle: \"WhatIFeel\"\nnoDate: \"true\"\ncomments: \"false\"\n---\n<link rel=\"stylesheet\" href=\"./ins.css\">\n<ul class=\"feel-content\" id=\"feelContent\">\n    <li class=\"content-item\">\n        <span class=\"content-time\"></span>\n        <span class=\"content-spec\"></span>\n    </li>\n</ul>\n\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","date":"2018-07-14T10:56:17.781Z","updated":"2018-07-14T10:56:17.781Z","path":"whatIFeel/index.html","_id":"cjjm6kmrf0001hjxtg2wzyxd5","content":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<ul class=\"feel-content\" id=\"feelContent\">\n    <li class=\"content-item\">\n        <span class=\"content-time\"></span>\n        <span class=\"content-spec\"></span>\n    </li>\n</ul>\n\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n","site":{"data":{}},"excerpt":"","more":"<link rel=\"stylesheet\" href=\"./ins.css\">\n<ul class=\"feel-content\" id=\"feelContent\">\n    <li class=\"content-item\">\n        <span class=\"content-time\"></span>\n        <span class=\"content-spec\"></span>\n    </li>\n</ul>\n\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n      loadScript('./ins.js')\n    }, 0)\n  })()\n</script>\n"},{"_content":".article-header {\n    \n    border-bottom: 1px solid #ddd;\n}\n.content-item{\n\tmin-height: 150px;\n\tpadding-top: 10px;\n\tlist-style: none;\n\tborder-bottom: 3px dashed pink;\n}\n.content-item span{\n\tdisplay: block;\n\tfont-size:18px;\n}\nspan.content-spec {\n    padding: 20px;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","source":"whatIFeel/ins.css","raw":".article-header {\n    \n    border-bottom: 1px solid #ddd;\n}\n.content-item{\n\tmin-height: 150px;\n\tpadding-top: 10px;\n\tlist-style: none;\n\tborder-bottom: 3px dashed pink;\n}\n.content-item span{\n\tdisplay: block;\n\tfont-size:18px;\n}\nspan.content-spec {\n    padding: 20px;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","date":"2018-07-14T11:04:13.511Z","updated":"2018-07-14T11:04:13.511Z","path":"whatIFeel/ins.css","layout":"false","title":"","comments":1,"_id":"cjjm6kmri0003hjxth8ew8226","content":".article-header {\n    \n    border-bottom: 1px solid #ddd;\n}\n.content-item{\n\tmin-height: 150px;\n\tpadding-top: 10px;\n\tlist-style: none;\n\tborder-bottom: 3px dashed pink;\n}\n.content-item span{\n\tdisplay: block;\n\tfont-size:18px;\n}\nspan.content-spec {\n    padding: 20px;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}","site":{"data":{}},"excerpt":"","more":".article-header {\n    \n    border-bottom: 1px solid #ddd;\n}\n.content-item{\n\tmin-height: 150px;\n\tpadding-top: 10px;\n\tlist-style: none;\n\tborder-bottom: 3px dashed pink;\n}\n.content-item span{\n\tdisplay: block;\n\tfont-size:18px;\n}\nspan.content-spec {\n    padding: 20px;\n}\n\n@media screen and (max-width:600px) {\n\t.instagram .thumb {\n\t\twidth: 50%;\n\t\tpadding-bottom: 50%;\n\t}\n\t.instagram .album li {\n\t\twidth: 100%;\n\t\tposition: relative;\n\t\tpadding-bottom: 100%;\n\t\ttext-align: center;\n\t}\n\t.instagram .album div.img-box{\n\t\tmargin: 0;\n\t\twidth: 90%;\n\t\theight: 90%;\n\t}\n}"},{"_content":"\n(function(searchData) {\n    function render(data){\n      console.log(data)\n      var telDom = '';\n      data.list.forEach(item => {\n        telDom += '<li class=\"content-item\">'\n        +'<span class=\"content-time\">'+item.date+'</span>'\n        +'<span class=\"content-spec\">'+item.content+'</span>'\n        +'</li>';\n      })\n      document.getElementById('feelContent').innerHTML = telDom;\n    }\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n    Ins.init();\n    // export default impush;\n\n    /***/\n})(undefined);","source":"whatIFeel/ins.js","raw":"\n(function(searchData) {\n    function render(data){\n      console.log(data)\n      var telDom = '';\n      data.list.forEach(item => {\n        telDom += '<li class=\"content-item\">'\n        +'<span class=\"content-time\">'+item.date+'</span>'\n        +'<span class=\"content-spec\">'+item.content+'</span>'\n        +'</li>';\n      })\n      document.getElementById('feelContent').innerHTML = telDom;\n    }\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n    Ins.init();\n    // export default impush;\n\n    /***/\n})(undefined);","date":"2018-07-14T10:58:56.982Z","updated":"2018-07-14T10:58:56.982Z","path":"whatIFeel/ins.js","layout":"false","title":"","comments":1,"_id":"cjjm6kmrk0005hjxtt202sr5v","content":"\n(function(searchData) {\n    function render(data){\n      console.log(data)\n      var telDom = '';\n      data.list.forEach(item => {\n        telDom += '<li class=\"content-item\">'\n        +'<span class=\"content-time\">'+item.date+'</span>'\n        +'<span class=\"content-spec\">'+item.content+'</span>'\n        +'</li>';\n      })\n      document.getElementById('feelContent').innerHTML = telDom;\n    }\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n    Ins.init();\n    // export default impush;\n\n    /***/\n})(undefined);","site":{"data":{}},"excerpt":"","more":"\n(function(searchData) {\n    function render(data){\n      console.log(data)\n      var telDom = '';\n      data.list.forEach(item => {\n        telDom += '<li class=\"content-item\">'\n        +'<span class=\"content-time\">'+item.date+'</span>'\n        +'<span class=\"content-spec\">'+item.content+'</span>'\n        +'</li>';\n      })\n      document.getElementById('feelContent').innerHTML = telDom;\n    }\n    function loadData(success) {\n      if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', './ins.json?t=' + +new Date(), true);\n\n        xhr.onload = function() {\n          if (this.status >= 200 && this.status < 300) {\n            var res = JSON.parse(this.response);\n            searchData = res;\n            success(searchData);\n          } else {\n            console.error(this.statusText);\n          }\n        };\n\n        xhr.onerror = function() {\n          console.error(this.statusText);\n        };\n\n        xhr.send();\n      } else {\n        success(searchData);\n      }\n    }\n    var Ins = {\n      init: function init() {\n        loadData(function(data) {\n          render(data);\n        });\n      }\n    };\n    Ins.init();\n    // export default impush;\n\n    /***/\n})(undefined);"},{"_content":"{\n\t\"list\": [{\n\t\t\"date\": \"2017-07\",\n\t\t\"content\":\"不知道该怎么说，就这么算了\"\n\t},{\n\t\t\"date\": \"2018-07\",\n\t\t\"content\":\"我也是真正的作死\"\n\t}]\n}","source":"whatIFeel/ins.json","raw":"{\n\t\"list\": [{\n\t\t\"date\": \"2017-07\",\n\t\t\"content\":\"不知道该怎么说，就这么算了\"\n\t},{\n\t\t\"date\": \"2018-07\",\n\t\t\"content\":\"我也是真正的作死\"\n\t}]\n}","date":"2018-07-14T10:52:49.557Z","updated":"2018-07-14T10:52:49.557Z","path":"whatIFeel/ins.json","layout":"false","title":"","comments":1,"_id":"cjjm6kmro0008hjxthc5mv8g7","content":"{\"list\":[{\"date\":\"2017-07\",\"content\":\"不知道该怎么说，就这么算了\"},{\"date\":\"2018-07\",\"content\":\"我也是真正的作死\"}]}","site":{"data":{}},"excerpt":"","more":"{\"list\":[{\"date\":\"2017-07\",\"content\":\"不知道该怎么说，就这么算了\"},{\"date\":\"2018-07\",\"content\":\"我也是真正的作死\"}]}"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"\n---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-06-25T12:44:11.107Z","updated":"2018-06-25T12:44:11.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjm6kmrc0000hjxt38d182d2","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"高阶组件入门（1)","_content":"\n高阶组件最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。\n之前看过几篇文章介绍高阶组件，这篇文章就是动手操作一番，有时候还不得不吐槽，说好能获得到的属性跟方法为什么没有获取到？\n\n<!-- more -->\n\n一、高阶组件定义\n\n> a higher-order component is a function that takes a component and returns a new component.\n> 翻译：高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。\n\n还有一种写法就是：\n\n> hocFactory:: W: React.Component => E: React.Component\n> 其中 W (WrappedComponent) 是指被包裹的 React.Component，\n> E (EnhancedComponent) 指返回类型为 React.Component 的新的 HOC。\n\n二、常见的HOC 实现方式（两种）\n\n> （1）Props Proxy（属性代理）： HOC 控制传给WrappedComponent W 的 props\n> \n> 下面是用途：\n\n - 更改 props \n - 抽象 state \n - 通过 refs 获取组件实例 \n - 把 WrappedComponent 与其它 elements包装在一起\n\n> （2）Inheritance Inversion（反向继承）： HOC 继承WrappedComponent W 的生命周期、state、各种function\n> \n> 下面是用途：\n\n - 渲染劫持（Render Highjacking）\n -  操作 state\n\n\n看到上面的这些官方介绍也许会有点懵，但是总言而之：高阶组件就是牵扯到两个组件的事情，那么就有下面的两个问题：\n1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？(看完本篇就会得到答案：能，必须能啊。全部当成props传给WrappedComponent了)\n2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？\n\n下面介绍开始...\n三、Props Proxy （属性代理）— **操作props**\n（3.1）更改props\n主要是高阶组件HOC控制传入wrappedComponent的props，来修改wrappedComponent内的props。\n如下图所示:\n\n图3.1.1\nHOC将{...this.props}，{...newProps}传递给WrappedComponent\n\n![这里写图片描述](http://img.blog.csdn.net/20171102212149019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n图3.1.2\nWrappedComponent中的参数，这里不仅仅有从HOC传来的参数，还有WrappedComponent(即Base)中自带的参数。\n\n![这里写图片描述](http://img.blog.csdn.net/20171102212305710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**注意，若是props中有重名的字段，那么HOC的props将会覆盖WrappedComponent中的props.**\n**总言而之：你可以『读取，添加，修改，删除』将要传递给 WrappedComponent 的 props。**\n\n（3.2）抽象 state \n这里不是通过ref获取state， 而是通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。这里用的比较多的就是react处理表单的时候。通常react在处理表单的时候，一般使用的是受控组件（[官方文档](https://reactjs.org/docs/forms.html#controlled-components)），即把input都做成受控的，改变value的时候，用onChange事件同步到state中。*当然这种操作通过Container组件也可以做到，具体的区别放到后面去比较（这点我也没有弄明白呢）*。看一下代码就知道怎么回事了：\n\n```\n// 普通组件Login，这里充当WrappedComponent\nimport React, { Component } from 'react';\nimport formCreate from './form-create';\n\n@formCreate  //这个用法是es7语法，下面有文章链接\nexport default class Login extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <label id=\"username\">\n            账户\n          </label>\n          <input name=\"username\" {...this.props.getField('username')}/>\n        </div>\n        <div>\n          <label id=\"password\">\n            密码\n          </label>\n          <input name=\"password\" {...this.props.getField('password')}/>\n        </div>\n        <div onClick={this.props.handleSubmit}>提交</div>\n        <div>other content</div>\n      </div>\n    )\n  }\n}\n\n//HOC，高阶组件从这里开始\nimport React, { Component } from 'react';\n\nconst formCreate = WrappedComponent => class extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      fields: {},\n    }\n  }\n  //是下面方法 getField()用到的\n  onChange = key => e => {\n    const { fields } = this.state;\n    fields[key] = e.target.value;\n    this.setState({\n      fields,\n    })\n  }\n  \n  handleSubmit = () => {\n    console.log(this.state.fields);\n  }\n  \n  getField = fieldName => {\n    return {\n      onChange: this.onChange(fieldName),\n    }\n  }\n  \n  render() {\n    const props = {\n      ...this.props,\n      handleSubmit: this.handleSubmit,\n      getField: this.getField,\n    }\n    return (<WrappedComponent\n      {...props}\n    />);\n  }\n};\nexport default formCreate;\n```\n**关键：这里我们把state，onChange等方法都放到HOC里**，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了。\n\n（3.3）通过 refs 获取组件实例\n当我们包装WrappedComponent的时候，想获取到它的实例怎么办，可以通过引用(ref),在WrappedComponent组件挂载的时候，会执行ref的回调函数，在HOC中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。\n\n```\nimport React, { Component } from 'react';\n\nconst refHoc = WrappedComponent => class extends Component {\n\n  componentDidMount() {\n    console.log(this.instanceComponent, 'instanceComponent');\n  }\n\n  render() {\n    return (<WrappedComponent\n      {...this.props}\n      ref={instanceComponent => this.instanceComponent = instanceComponent}\n    />);\n  }\n};\n\nexport default refHoc;\n```\n（3.4）把 WrappedComponent 与其它 elements包装在一起\n这一点就是很简单且容易理解：出于操作样式、布局或其它目的，你可以将 WrappedComponent 与其它组件包装在一起。*一些基本的用法也可以使用正常的父组件来实现*。\n\n> 此处看一下父组件能做和不能做的事情（与高阶组件对比）：\n>1.操作 props\n>2.抽象 state。但是有缺点，不能再父组件外获取到它的 state，除非明确地实现了钩子。\n>3.与新的 React Element 包装。这似乎是唯一一点，使用父组件要比高阶组件强，但高阶组件也同样可以实现。\n>4.Children 的操控。如果 children 不是单一 root，则需要多添加一层来包括所有 children，可能会使你的 markup 变得有点笨重。使用高阶组件可以保证单一 root。\n>5.父组件可以在元素树立随意使用，它们不像高阶组件一样限制于一个组件。\n\n通常来讲，能使用父组件达到的效果，尽量不要用高阶组件，因为高阶组件是一种更 hack 的方法，但同时也有更高的灵活性。\n下一篇会继续介绍一下II\n\n[高阶组件的es7语法@装饰器](https://github.com/iuap-design/blog/issues/128)\n","source":"_posts/react_hoc_1.md","raw":"\n---\ntitle: \"高阶组件入门（1)\"\ntags: \n\t- \"react\"\n\t- \"hoc-react\"\n---\n\n高阶组件最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。\n之前看过几篇文章介绍高阶组件，这篇文章就是动手操作一番，有时候还不得不吐槽，说好能获得到的属性跟方法为什么没有获取到？\n\n<!-- more -->\n\n一、高阶组件定义\n\n> a higher-order component is a function that takes a component and returns a new component.\n> 翻译：高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。\n\n还有一种写法就是：\n\n> hocFactory:: W: React.Component => E: React.Component\n> 其中 W (WrappedComponent) 是指被包裹的 React.Component，\n> E (EnhancedComponent) 指返回类型为 React.Component 的新的 HOC。\n\n二、常见的HOC 实现方式（两种）\n\n> （1）Props Proxy（属性代理）： HOC 控制传给WrappedComponent W 的 props\n> \n> 下面是用途：\n\n - 更改 props \n - 抽象 state \n - 通过 refs 获取组件实例 \n - 把 WrappedComponent 与其它 elements包装在一起\n\n> （2）Inheritance Inversion（反向继承）： HOC 继承WrappedComponent W 的生命周期、state、各种function\n> \n> 下面是用途：\n\n - 渲染劫持（Render Highjacking）\n -  操作 state\n\n\n看到上面的这些官方介绍也许会有点懵，但是总言而之：高阶组件就是牵扯到两个组件的事情，那么就有下面的两个问题：\n1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？(看完本篇就会得到答案：能，必须能啊。全部当成props传给WrappedComponent了)\n2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？\n\n下面介绍开始...\n三、Props Proxy （属性代理）— **操作props**\n（3.1）更改props\n主要是高阶组件HOC控制传入wrappedComponent的props，来修改wrappedComponent内的props。\n如下图所示:\n\n图3.1.1\nHOC将{...this.props}，{...newProps}传递给WrappedComponent\n\n![这里写图片描述](http://img.blog.csdn.net/20171102212149019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n图3.1.2\nWrappedComponent中的参数，这里不仅仅有从HOC传来的参数，还有WrappedComponent(即Base)中自带的参数。\n\n![这里写图片描述](http://img.blog.csdn.net/20171102212305710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**注意，若是props中有重名的字段，那么HOC的props将会覆盖WrappedComponent中的props.**\n**总言而之：你可以『读取，添加，修改，删除』将要传递给 WrappedComponent 的 props。**\n\n（3.2）抽象 state \n这里不是通过ref获取state， 而是通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。这里用的比较多的就是react处理表单的时候。通常react在处理表单的时候，一般使用的是受控组件（[官方文档](https://reactjs.org/docs/forms.html#controlled-components)），即把input都做成受控的，改变value的时候，用onChange事件同步到state中。*当然这种操作通过Container组件也可以做到，具体的区别放到后面去比较（这点我也没有弄明白呢）*。看一下代码就知道怎么回事了：\n\n```\n// 普通组件Login，这里充当WrappedComponent\nimport React, { Component } from 'react';\nimport formCreate from './form-create';\n\n@formCreate  //这个用法是es7语法，下面有文章链接\nexport default class Login extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <label id=\"username\">\n            账户\n          </label>\n          <input name=\"username\" {...this.props.getField('username')}/>\n        </div>\n        <div>\n          <label id=\"password\">\n            密码\n          </label>\n          <input name=\"password\" {...this.props.getField('password')}/>\n        </div>\n        <div onClick={this.props.handleSubmit}>提交</div>\n        <div>other content</div>\n      </div>\n    )\n  }\n}\n\n//HOC，高阶组件从这里开始\nimport React, { Component } from 'react';\n\nconst formCreate = WrappedComponent => class extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      fields: {},\n    }\n  }\n  //是下面方法 getField()用到的\n  onChange = key => e => {\n    const { fields } = this.state;\n    fields[key] = e.target.value;\n    this.setState({\n      fields,\n    })\n  }\n  \n  handleSubmit = () => {\n    console.log(this.state.fields);\n  }\n  \n  getField = fieldName => {\n    return {\n      onChange: this.onChange(fieldName),\n    }\n  }\n  \n  render() {\n    const props = {\n      ...this.props,\n      handleSubmit: this.handleSubmit,\n      getField: this.getField,\n    }\n    return (<WrappedComponent\n      {...props}\n    />);\n  }\n};\nexport default formCreate;\n```\n**关键：这里我们把state，onChange等方法都放到HOC里**，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了。\n\n（3.3）通过 refs 获取组件实例\n当我们包装WrappedComponent的时候，想获取到它的实例怎么办，可以通过引用(ref),在WrappedComponent组件挂载的时候，会执行ref的回调函数，在HOC中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。\n\n```\nimport React, { Component } from 'react';\n\nconst refHoc = WrappedComponent => class extends Component {\n\n  componentDidMount() {\n    console.log(this.instanceComponent, 'instanceComponent');\n  }\n\n  render() {\n    return (<WrappedComponent\n      {...this.props}\n      ref={instanceComponent => this.instanceComponent = instanceComponent}\n    />);\n  }\n};\n\nexport default refHoc;\n```\n（3.4）把 WrappedComponent 与其它 elements包装在一起\n这一点就是很简单且容易理解：出于操作样式、布局或其它目的，你可以将 WrappedComponent 与其它组件包装在一起。*一些基本的用法也可以使用正常的父组件来实现*。\n\n> 此处看一下父组件能做和不能做的事情（与高阶组件对比）：\n>1.操作 props\n>2.抽象 state。但是有缺点，不能再父组件外获取到它的 state，除非明确地实现了钩子。\n>3.与新的 React Element 包装。这似乎是唯一一点，使用父组件要比高阶组件强，但高阶组件也同样可以实现。\n>4.Children 的操控。如果 children 不是单一 root，则需要多添加一层来包括所有 children，可能会使你的 markup 变得有点笨重。使用高阶组件可以保证单一 root。\n>5.父组件可以在元素树立随意使用，它们不像高阶组件一样限制于一个组件。\n\n通常来讲，能使用父组件达到的效果，尽量不要用高阶组件，因为高阶组件是一种更 hack 的方法，但同时也有更高的灵活性。\n下一篇会继续介绍一下II\n\n[高阶组件的es7语法@装饰器](https://github.com/iuap-design/blog/issues/128)\n","slug":"react_hoc_1","published":1,"date":"2018-06-25T12:44:11.108Z","updated":"2018-07-14T10:32:38.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjm6kmrg0002hjxtuxzx6ci1","content":"<p>高阶组件最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。<br>之前看过几篇文章介绍高阶组件，这篇文章就是动手操作一番，有时候还不得不吐槽，说好能获得到的属性跟方法为什么没有获取到？</p>\n<a id=\"more\"></a>\n<p>一、高阶组件定义</p>\n<blockquote>\n<p>a higher-order component is a function that takes a component and returns a new component.<br>翻译：高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。</p>\n</blockquote>\n<p>还有一种写法就是：</p>\n<blockquote>\n<p>hocFactory:: W: React.Component =&gt; E: React.Component<br>其中 W (WrappedComponent) 是指被包裹的 React.Component，<br>E (EnhancedComponent) 指返回类型为 React.Component 的新的 HOC。</p>\n</blockquote>\n<p>二、常见的HOC 实现方式（两种）</p>\n<blockquote>\n<p>（1）Props Proxy（属性代理）： HOC 控制传给WrappedComponent W 的 props</p>\n<p>下面是用途：</p>\n</blockquote>\n<ul>\n<li>更改 props </li>\n<li>抽象 state </li>\n<li>通过 refs 获取组件实例 </li>\n<li>把 WrappedComponent 与其它 elements包装在一起</li>\n</ul>\n<blockquote>\n<p>（2）Inheritance Inversion（反向继承）： HOC 继承WrappedComponent W 的生命周期、state、各种function</p>\n<p>下面是用途：</p>\n</blockquote>\n<ul>\n<li>渲染劫持（Render Highjacking）</li>\n<li>操作 state</li>\n</ul>\n<p>看到上面的这些官方介绍也许会有点懵，但是总言而之：高阶组件就是牵扯到两个组件的事情，那么就有下面的两个问题：<br>1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？(看完本篇就会得到答案：能，必须能啊。全部当成props传给WrappedComponent了)<br>2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？</p>\n<p>下面介绍开始…<br>三、Props Proxy （属性代理）— <strong>操作props</strong><br>（3.1）更改props<br>主要是高阶组件HOC控制传入wrappedComponent的props，来修改wrappedComponent内的props。<br>如下图所示:</p>\n<p>图3.1.1<br>HOC将{…this.props}，{…newProps}传递给WrappedComponent</p>\n<p><img src=\"http://img.blog.csdn.net/20171102212149019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>图3.1.2<br>WrappedComponent中的参数，这里不仅仅有从HOC传来的参数，还有WrappedComponent(即Base)中自带的参数。</p>\n<p><img src=\"http://img.blog.csdn.net/20171102212305710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><strong>注意，若是props中有重名的字段，那么HOC的props将会覆盖WrappedComponent中的props.</strong><br><strong>总言而之：你可以『读取，添加，修改，删除』将要传递给 WrappedComponent 的 props。</strong></p>\n<p>（3.2）抽象 state<br>这里不是通过ref获取state， 而是通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。这里用的比较多的就是react处理表单的时候。通常react在处理表单的时候，一般使用的是受控组件（<a href=\"https://reactjs.org/docs/forms.html#controlled-components\" target=\"_blank\" rel=\"noopener\">官方文档</a>），即把input都做成受控的，改变value的时候，用onChange事件同步到state中。<em>当然这种操作通过Container组件也可以做到，具体的区别放到后面去比较（这点我也没有弄明白呢）</em>。看一下代码就知道怎么回事了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通组件Login，这里充当WrappedComponent</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import formCreate from &apos;./form-create&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@formCreate  //这个用法是es7语法，下面有文章链接</span><br><span class=\"line\">export default class Login extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;label id=&quot;username&quot;&gt;</span><br><span class=\"line\">            账户</span><br><span class=\"line\">          &lt;/label&gt;</span><br><span class=\"line\">          &lt;input name=&quot;username&quot; &#123;...this.props.getField(&apos;username&apos;)&#125;/&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;label id=&quot;password&quot;&gt;</span><br><span class=\"line\">            密码</span><br><span class=\"line\">          &lt;/label&gt;</span><br><span class=\"line\">          &lt;input name=&quot;password&quot; &#123;...this.props.getField(&apos;password&apos;)&#125;/&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div onClick=&#123;this.props.handleSubmit&#125;&gt;提交&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;other content&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//HOC，高阶组件从这里开始</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const formCreate = WrappedComponent =&gt; class extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      fields: &#123;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //是下面方法 getField()用到的</span><br><span class=\"line\">  onChange = key =&gt; e =&gt; &#123;</span><br><span class=\"line\">    const &#123; fields &#125; = this.state;</span><br><span class=\"line\">    fields[key] = e.target.value;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      fields,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  handleSubmit = () =&gt; &#123;</span><br><span class=\"line\">    console.log(this.state.fields);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getField = fieldName =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      onChange: this.onChange(fieldName),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const props = &#123;</span><br><span class=\"line\">      ...this.props,</span><br><span class=\"line\">      handleSubmit: this.handleSubmit,</span><br><span class=\"line\">      getField: this.getField,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (&lt;WrappedComponent</span><br><span class=\"line\">      &#123;...props&#125;</span><br><span class=\"line\">    /&gt;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default formCreate;</span><br></pre></td></tr></table></figure>\n<p><strong>关键：这里我们把state，onChange等方法都放到HOC里</strong>，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了。</p>\n<p>（3.3）通过 refs 获取组件实例<br>当我们包装WrappedComponent的时候，想获取到它的实例怎么办，可以通过引用(ref),在WrappedComponent组件挂载的时候，会执行ref的回调函数，在HOC中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const refHoc = WrappedComponent =&gt; class extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    console.log(this.instanceComponent, &apos;instanceComponent&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (&lt;WrappedComponent</span><br><span class=\"line\">      &#123;...this.props&#125;</span><br><span class=\"line\">      ref=&#123;instanceComponent =&gt; this.instanceComponent = instanceComponent&#125;</span><br><span class=\"line\">    /&gt;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default refHoc;</span><br></pre></td></tr></table></figure>\n<p>（3.4）把 WrappedComponent 与其它 elements包装在一起<br>这一点就是很简单且容易理解：出于操作样式、布局或其它目的，你可以将 WrappedComponent 与其它组件包装在一起。<em>一些基本的用法也可以使用正常的父组件来实现</em>。</p>\n<blockquote>\n<p>此处看一下父组件能做和不能做的事情（与高阶组件对比）：<br>1.操作 props<br>2.抽象 state。但是有缺点，不能再父组件外获取到它的 state，除非明确地实现了钩子。<br>3.与新的 React Element 包装。这似乎是唯一一点，使用父组件要比高阶组件强，但高阶组件也同样可以实现。<br>4.Children 的操控。如果 children 不是单一 root，则需要多添加一层来包括所有 children，可能会使你的 markup 变得有点笨重。使用高阶组件可以保证单一 root。<br>5.父组件可以在元素树立随意使用，它们不像高阶组件一样限制于一个组件。</p>\n</blockquote>\n<p>通常来讲，能使用父组件达到的效果，尽量不要用高阶组件，因为高阶组件是一种更 hack 的方法，但同时也有更高的灵活性。<br>下一篇会继续介绍一下II</p>\n<p><a href=\"https://github.com/iuap-design/blog/issues/128\" target=\"_blank\" rel=\"noopener\">高阶组件的es7语法@装饰器</a></p>\n","site":{"data":{}},"excerpt":"<p>高阶组件最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。<br>之前看过几篇文章介绍高阶组件，这篇文章就是动手操作一番，有时候还不得不吐槽，说好能获得到的属性跟方法为什么没有获取到？</p>","more":"<p>一、高阶组件定义</p>\n<blockquote>\n<p>a higher-order component is a function that takes a component and returns a new component.<br>翻译：高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。</p>\n</blockquote>\n<p>还有一种写法就是：</p>\n<blockquote>\n<p>hocFactory:: W: React.Component =&gt; E: React.Component<br>其中 W (WrappedComponent) 是指被包裹的 React.Component，<br>E (EnhancedComponent) 指返回类型为 React.Component 的新的 HOC。</p>\n</blockquote>\n<p>二、常见的HOC 实现方式（两种）</p>\n<blockquote>\n<p>（1）Props Proxy（属性代理）： HOC 控制传给WrappedComponent W 的 props</p>\n<p>下面是用途：</p>\n</blockquote>\n<ul>\n<li>更改 props </li>\n<li>抽象 state </li>\n<li>通过 refs 获取组件实例 </li>\n<li>把 WrappedComponent 与其它 elements包装在一起</li>\n</ul>\n<blockquote>\n<p>（2）Inheritance Inversion（反向继承）： HOC 继承WrappedComponent W 的生命周期、state、各种function</p>\n<p>下面是用途：</p>\n</blockquote>\n<ul>\n<li>渲染劫持（Render Highjacking）</li>\n<li>操作 state</li>\n</ul>\n<p>看到上面的这些官方介绍也许会有点懵，但是总言而之：高阶组件就是牵扯到两个组件的事情，那么就有下面的两个问题：<br>1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？(看完本篇就会得到答案：能，必须能啊。全部当成props传给WrappedComponent了)<br>2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？</p>\n<p>下面介绍开始…<br>三、Props Proxy （属性代理）— <strong>操作props</strong><br>（3.1）更改props<br>主要是高阶组件HOC控制传入wrappedComponent的props，来修改wrappedComponent内的props。<br>如下图所示:</p>\n<p>图3.1.1<br>HOC将{…this.props}，{…newProps}传递给WrappedComponent</p>\n<p><img src=\"http://img.blog.csdn.net/20171102212149019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>图3.1.2<br>WrappedComponent中的参数，这里不仅仅有从HOC传来的参数，还有WrappedComponent(即Base)中自带的参数。</p>\n<p><img src=\"http://img.blog.csdn.net/20171102212305710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><strong>注意，若是props中有重名的字段，那么HOC的props将会覆盖WrappedComponent中的props.</strong><br><strong>总言而之：你可以『读取，添加，修改，删除』将要传递给 WrappedComponent 的 props。</strong></p>\n<p>（3.2）抽象 state<br>这里不是通过ref获取state， 而是通过 { props, 回调函数 } 传递给wrappedComponent组件，通过回调函数获取state。这里用的比较多的就是react处理表单的时候。通常react在处理表单的时候，一般使用的是受控组件（<a href=\"https://reactjs.org/docs/forms.html#controlled-components\" target=\"_blank\" rel=\"noopener\">官方文档</a>），即把input都做成受控的，改变value的时候，用onChange事件同步到state中。<em>当然这种操作通过Container组件也可以做到，具体的区别放到后面去比较（这点我也没有弄明白呢）</em>。看一下代码就知道怎么回事了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通组件Login，这里充当WrappedComponent</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import formCreate from &apos;./form-create&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@formCreate  //这个用法是es7语法，下面有文章链接</span><br><span class=\"line\">export default class Login extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;label id=&quot;username&quot;&gt;</span><br><span class=\"line\">            账户</span><br><span class=\"line\">          &lt;/label&gt;</span><br><span class=\"line\">          &lt;input name=&quot;username&quot; &#123;...this.props.getField(&apos;username&apos;)&#125;/&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;label id=&quot;password&quot;&gt;</span><br><span class=\"line\">            密码</span><br><span class=\"line\">          &lt;/label&gt;</span><br><span class=\"line\">          &lt;input name=&quot;password&quot; &#123;...this.props.getField(&apos;password&apos;)&#125;/&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div onClick=&#123;this.props.handleSubmit&#125;&gt;提交&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;other content&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//HOC，高阶组件从这里开始</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const formCreate = WrappedComponent =&gt; class extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      fields: &#123;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //是下面方法 getField()用到的</span><br><span class=\"line\">  onChange = key =&gt; e =&gt; &#123;</span><br><span class=\"line\">    const &#123; fields &#125; = this.state;</span><br><span class=\"line\">    fields[key] = e.target.value;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      fields,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  handleSubmit = () =&gt; &#123;</span><br><span class=\"line\">    console.log(this.state.fields);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  getField = fieldName =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      onChange: this.onChange(fieldName),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const props = &#123;</span><br><span class=\"line\">      ...this.props,</span><br><span class=\"line\">      handleSubmit: this.handleSubmit,</span><br><span class=\"line\">      getField: this.getField,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return (&lt;WrappedComponent</span><br><span class=\"line\">      &#123;...props&#125;</span><br><span class=\"line\">    /&gt;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default formCreate;</span><br></pre></td></tr></table></figure>\n<p><strong>关键：这里我们把state，onChange等方法都放到HOC里</strong>，其实是遵从的react组件的一种规范，子组件简单，傻瓜，负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了。</p>\n<p>（3.3）通过 refs 获取组件实例<br>当我们包装WrappedComponent的时候，想获取到它的实例怎么办，可以通过引用(ref),在WrappedComponent组件挂载的时候，会执行ref的回调函数，在HOC中取到组件的实例。通过打印，可以看到它的props， state，都是可以取到的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const refHoc = WrappedComponent =&gt; class extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    console.log(this.instanceComponent, &apos;instanceComponent&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (&lt;WrappedComponent</span><br><span class=\"line\">      &#123;...this.props&#125;</span><br><span class=\"line\">      ref=&#123;instanceComponent =&gt; this.instanceComponent = instanceComponent&#125;</span><br><span class=\"line\">    /&gt;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default refHoc;</span><br></pre></td></tr></table></figure>\n<p>（3.4）把 WrappedComponent 与其它 elements包装在一起<br>这一点就是很简单且容易理解：出于操作样式、布局或其它目的，你可以将 WrappedComponent 与其它组件包装在一起。<em>一些基本的用法也可以使用正常的父组件来实现</em>。</p>\n<blockquote>\n<p>此处看一下父组件能做和不能做的事情（与高阶组件对比）：<br>1.操作 props<br>2.抽象 state。但是有缺点，不能再父组件外获取到它的 state，除非明确地实现了钩子。<br>3.与新的 React Element 包装。这似乎是唯一一点，使用父组件要比高阶组件强，但高阶组件也同样可以实现。<br>4.Children 的操控。如果 children 不是单一 root，则需要多添加一层来包括所有 children，可能会使你的 markup 变得有点笨重。使用高阶组件可以保证单一 root。<br>5.父组件可以在元素树立随意使用，它们不像高阶组件一样限制于一个组件。</p>\n</blockquote>\n<p>通常来讲，能使用父组件达到的效果，尽量不要用高阶组件，因为高阶组件是一种更 hack 的方法，但同时也有更高的灵活性。<br>下一篇会继续介绍一下II</p>\n<p><a href=\"https://github.com/iuap-design/blog/issues/128\" target=\"_blank\" rel=\"noopener\">高阶组件的es7语法@装饰器</a></p>"},{"title":"高阶组件入门（2)","_content":"\n（一）前篇回顾\n-------\n\n上篇文章[React高阶组件操作入门（一）](https://github.com/iuap-design/blog/issues/241)介绍了高阶组件的实现方式之一：PP（属性代理）。\n\n其实在第一篇提到，高阶组件的使用就是涉及到两个问题：\n\n1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？\n2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？\n\n<!-- more -->\n在第一篇文章就是解答了第一个问题，答案是能！！HOC将HOCd的props,state,function,当作props传给WrappedComponent组件，WrappedComponent通过this.props取到这些内容，如下图：\n\n                          图1-1 EnhacedComponent组件传值\n\n![这里写图片描述](http://img.blog.csdn.net/20171107205438033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n                         图1-2 WrappedComponent组件接收\n![这里写图片描述](http://img.blog.csdn.net/20171107205535216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n（二）Inheritance Inversion（反向继承）\n------------------------------\n\n**反向继承可以解决上述的第二个疑问：**\n组件wrappedComponent能否将props,state,function传递给EnhancedComponent？\n\n这里是指EnhacedComponent继承了WrappedComponent组件的生命周期、state和function。按照上篇文章提到的两点用途出发来深入理解II。\n\n - 渲染劫持（Render Highjacking） \n - 操作 state\n\n\n （2.1）渲染劫持\n\n\n> 本质就是EnhacedComponent继承了WrappedComponent组件的生命周期函数，尤其是render()函数\n\n\n```\n//Wrappedcomponent\nimport React, { Component } from 'react';\nclass Usual extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      usual: 'usual',\n    }\n  }\n\n  componentDidMount() {\n    console.log('didMount')\n  }\n \n  render() {\n    console.log(this.props);\n\n    return (\n      <div>\n        Usual\n      </div>\n    )\n  }\n}\n\nexport default Usual;\n\n```\n\n\n```\n//下面是HOC\nimport React, { Component } from 'react';\nconst iiHoc = WrappedComponent => class extends WrappedComponent {\n\t  constructor(props){\n\t  \tsuper(props);\n\t  \tthis.state = {\n\t  \t\t...this.state,\n\t  \t}\n\t  }\n\t\n\t  alertFunc = () =>{\n\t  \talert(\"HOC\");\n\t  }\n\n    render() {\n      \n      return <div>{super.render()}</div>\n     \n    }\n}\nexport default iiHoc;\n```\n这样会正常的渲染出来 Usual\n\n（2.2）操作 state\n\n\n> 本质就是EnhacedComponent继承了WrappedComponent组件的state\n\n\n\n             如图2-2-1通过this.state获取到WrappedComponent的state\n![这里写图片描述](http://img.blog.csdn.net/20171107211149475?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n> 但是，关键是在EnhacedComponent的constructor中没有定义自己的state！！\n\n若是定义就会出现的问题如下图2-2-2所示\n\n     图2-2-2 EnhancedComponent的constructor中定义state,那么this.state的取值\n![这里写图片描述](http://img.blog.csdn.net/20171107211424840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nEnhacedComponent的state覆盖了Wrapped Component的state。这时候的怎么让两者并存呢？如下图2-2-3所示\n\n          图2-2-3 EnhacedComponent的state与WrappedComponent的state并存\n![这里写图片描述](http://img.blog.csdn.net/20171107211543953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n（2.3）function的继承\n这里就不多说，通过this.functionName()就可以调用到WrappedComponent中的方法。**但是有一个注意的：若是EnhancedComponent中的方法与WrappedComponent的方法重名，那么EnhacedComponent函数覆盖Wrapped Component函数。**\n\n（三）此处看一下父组件与高阶组件对比\n------------------\n\n有些同学可能会觉得高阶组件有些类似父组件的使用。例如，我们完全可以把高阶组件中的逻辑放到一个父组件中去执行，执行完成的结果再传递给子组件。从逻辑的执行流程上来看，高阶组件确实和父组件比较相像，但是高阶组件强调的是逻辑的抽象。高阶组件是一个函数，函数关注的是逻辑；父组件是一个组件，组件主要关注的是UI/DOM。如果逻辑是与DOM直接相关的，那么这部分逻辑适合放到父组件中实现；如果逻辑是与DOM不直接相关的，那么这部分逻辑适合使用高阶组件抽象，如数据校验、请求发送等。\n\n（四）使用高阶组件遇到的问题\n--------------\n（4.1）静态方法丢失\n无论PP还是II的方式，WrappedComponent的静态方法都不会复制，如果要用需要我们单独复制。因为高阶组件返回的新组件，是不包含被包装组件的静态方法。\n具体的解决方案如下\n\n> [静态方法解决方式](https://segmentfault.com/a/1190000010845410)\n\n（4.2）refs不会传递。 \n意思就是HOC里指定的ref，并不会传递到子组件，如果你要使用最好写回调函数通过props传下去。\n\n（4.3）不要在render方法内部使用高阶组件。\n简单来说react的差分算法会去比较 NowElement === OldElement, 来决定要不要替换这个elementTree。。因为高阶组件每次都会返回一个新的组件，在render中使用会导致每次渲染出来的组件都不相等（===），于是每次render，组件都会卸载（unmount），然后重新挂载（mount），既影响了效率，又丢失了组件及其子组件的状态。高阶组件最适合使用的地方是在组件定义的外部，这样就不会受到组件生命周期的影响了。\n\n（4.4）最重要的原则就是，注意高阶组件不会修改子组件，也不拷贝子组件的行为。\n高阶组件只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数\n\n（4.5）要给hoc添加class名，便于debugger。\n当我们在chrome里应用React-Developer-Tools的时候，组件结构可以一目了然，所以DisplayName最好还是加上。\n\n```\nconst getDisplayName = component => component.displayName || component.name\nfunction hoc(WrappedComponent){\n    return class HOC extends Component {\n        static displayName = `HOC(${getDisplayName(WrappedComponent)})`\n        constructor(props) {\n        }\n        \n        componentWillMount() { \n\n        render() {\n          return ()\n        }\n    }\n}\nexport default hoc;\n```\n\n> [refs不会传递解决方法](https://segmentfault.com/a/1190000010845410)\n\n\n（五）依然存留的疑问\n----------\n\n1.上述两个问题中的第二个问题：.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？中没有解答是wrappedComponent能否将props传递给EnhancedComponent，这个没有找到资料，也许这是没有必要的操作。根据后续的深入开发以及学习中，也许会解答这个问题。\n2.属性的校验\n我们知道PropsTypes有着属性校验，那么EnhacedComponent与WrappedComponent之间的传值可以走属性校验吗？\n\n\n\n","source":"_posts/react_hoc_2.md","raw":"\n---\ntitle: \"高阶组件入门（2)\"\ntags: \n\t- \"react\"\n\t- \"hoc-react\"\n---\n\n（一）前篇回顾\n-------\n\n上篇文章[React高阶组件操作入门（一）](https://github.com/iuap-design/blog/issues/241)介绍了高阶组件的实现方式之一：PP（属性代理）。\n\n其实在第一篇提到，高阶组件的使用就是涉及到两个问题：\n\n1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？\n2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？\n\n<!-- more -->\n在第一篇文章就是解答了第一个问题，答案是能！！HOC将HOCd的props,state,function,当作props传给WrappedComponent组件，WrappedComponent通过this.props取到这些内容，如下图：\n\n                          图1-1 EnhacedComponent组件传值\n\n![这里写图片描述](http://img.blog.csdn.net/20171107205438033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n                         图1-2 WrappedComponent组件接收\n![这里写图片描述](http://img.blog.csdn.net/20171107205535216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n（二）Inheritance Inversion（反向继承）\n------------------------------\n\n**反向继承可以解决上述的第二个疑问：**\n组件wrappedComponent能否将props,state,function传递给EnhancedComponent？\n\n这里是指EnhacedComponent继承了WrappedComponent组件的生命周期、state和function。按照上篇文章提到的两点用途出发来深入理解II。\n\n - 渲染劫持（Render Highjacking） \n - 操作 state\n\n\n （2.1）渲染劫持\n\n\n> 本质就是EnhacedComponent继承了WrappedComponent组件的生命周期函数，尤其是render()函数\n\n\n```\n//Wrappedcomponent\nimport React, { Component } from 'react';\nclass Usual extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      usual: 'usual',\n    }\n  }\n\n  componentDidMount() {\n    console.log('didMount')\n  }\n \n  render() {\n    console.log(this.props);\n\n    return (\n      <div>\n        Usual\n      </div>\n    )\n  }\n}\n\nexport default Usual;\n\n```\n\n\n```\n//下面是HOC\nimport React, { Component } from 'react';\nconst iiHoc = WrappedComponent => class extends WrappedComponent {\n\t  constructor(props){\n\t  \tsuper(props);\n\t  \tthis.state = {\n\t  \t\t...this.state,\n\t  \t}\n\t  }\n\t\n\t  alertFunc = () =>{\n\t  \talert(\"HOC\");\n\t  }\n\n    render() {\n      \n      return <div>{super.render()}</div>\n     \n    }\n}\nexport default iiHoc;\n```\n这样会正常的渲染出来 Usual\n\n（2.2）操作 state\n\n\n> 本质就是EnhacedComponent继承了WrappedComponent组件的state\n\n\n\n             如图2-2-1通过this.state获取到WrappedComponent的state\n![这里写图片描述](http://img.blog.csdn.net/20171107211149475?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n> 但是，关键是在EnhacedComponent的constructor中没有定义自己的state！！\n\n若是定义就会出现的问题如下图2-2-2所示\n\n     图2-2-2 EnhancedComponent的constructor中定义state,那么this.state的取值\n![这里写图片描述](http://img.blog.csdn.net/20171107211424840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nEnhacedComponent的state覆盖了Wrapped Component的state。这时候的怎么让两者并存呢？如下图2-2-3所示\n\n          图2-2-3 EnhacedComponent的state与WrappedComponent的state并存\n![这里写图片描述](http://img.blog.csdn.net/20171107211543953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n（2.3）function的继承\n这里就不多说，通过this.functionName()就可以调用到WrappedComponent中的方法。**但是有一个注意的：若是EnhancedComponent中的方法与WrappedComponent的方法重名，那么EnhacedComponent函数覆盖Wrapped Component函数。**\n\n（三）此处看一下父组件与高阶组件对比\n------------------\n\n有些同学可能会觉得高阶组件有些类似父组件的使用。例如，我们完全可以把高阶组件中的逻辑放到一个父组件中去执行，执行完成的结果再传递给子组件。从逻辑的执行流程上来看，高阶组件确实和父组件比较相像，但是高阶组件强调的是逻辑的抽象。高阶组件是一个函数，函数关注的是逻辑；父组件是一个组件，组件主要关注的是UI/DOM。如果逻辑是与DOM直接相关的，那么这部分逻辑适合放到父组件中实现；如果逻辑是与DOM不直接相关的，那么这部分逻辑适合使用高阶组件抽象，如数据校验、请求发送等。\n\n（四）使用高阶组件遇到的问题\n--------------\n（4.1）静态方法丢失\n无论PP还是II的方式，WrappedComponent的静态方法都不会复制，如果要用需要我们单独复制。因为高阶组件返回的新组件，是不包含被包装组件的静态方法。\n具体的解决方案如下\n\n> [静态方法解决方式](https://segmentfault.com/a/1190000010845410)\n\n（4.2）refs不会传递。 \n意思就是HOC里指定的ref，并不会传递到子组件，如果你要使用最好写回调函数通过props传下去。\n\n（4.3）不要在render方法内部使用高阶组件。\n简单来说react的差分算法会去比较 NowElement === OldElement, 来决定要不要替换这个elementTree。。因为高阶组件每次都会返回一个新的组件，在render中使用会导致每次渲染出来的组件都不相等（===），于是每次render，组件都会卸载（unmount），然后重新挂载（mount），既影响了效率，又丢失了组件及其子组件的状态。高阶组件最适合使用的地方是在组件定义的外部，这样就不会受到组件生命周期的影响了。\n\n（4.4）最重要的原则就是，注意高阶组件不会修改子组件，也不拷贝子组件的行为。\n高阶组件只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数\n\n（4.5）要给hoc添加class名，便于debugger。\n当我们在chrome里应用React-Developer-Tools的时候，组件结构可以一目了然，所以DisplayName最好还是加上。\n\n```\nconst getDisplayName = component => component.displayName || component.name\nfunction hoc(WrappedComponent){\n    return class HOC extends Component {\n        static displayName = `HOC(${getDisplayName(WrappedComponent)})`\n        constructor(props) {\n        }\n        \n        componentWillMount() { \n\n        render() {\n          return ()\n        }\n    }\n}\nexport default hoc;\n```\n\n> [refs不会传递解决方法](https://segmentfault.com/a/1190000010845410)\n\n\n（五）依然存留的疑问\n----------\n\n1.上述两个问题中的第二个问题：.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？中没有解答是wrappedComponent能否将props传递给EnhancedComponent，这个没有找到资料，也许这是没有必要的操作。根据后续的深入开发以及学习中，也许会解答这个问题。\n2.属性的校验\n我们知道PropsTypes有着属性校验，那么EnhacedComponent与WrappedComponent之间的传值可以走属性校验吗？\n\n\n\n","slug":"react_hoc_2","published":1,"date":"2018-06-25T12:44:11.109Z","updated":"2018-07-14T10:33:43.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjm6kmrj0004hjxtx4ahz3s7","content":"<h2 id=\"（一）前篇回顾\"><a href=\"#（一）前篇回顾\" class=\"headerlink\" title=\"（一）前篇回顾\"></a>（一）前篇回顾</h2><p>上篇文章<a href=\"https://github.com/iuap-design/blog/issues/241\" target=\"_blank\" rel=\"noopener\">React高阶组件操作入门（一）</a>介绍了高阶组件的实现方式之一：PP（属性代理）。</p>\n<p>其实在第一篇提到，高阶组件的使用就是涉及到两个问题：</p>\n<p>1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？<br>2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？</p>\n<a id=\"more\"></a>\n<p>在第一篇文章就是解答了第一个问题，答案是能！！HOC将HOCd的props,state,function,当作props传给WrappedComponent组件，WrappedComponent通过this.props取到这些内容，如下图：</p>\n<pre><code>图1-1 EnhacedComponent组件传值\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107205438033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<pre><code>图1-2 WrappedComponent组件接收\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107205535216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"（二）Inheritance-Inversion（反向继承）\"><a href=\"#（二）Inheritance-Inversion（反向继承）\" class=\"headerlink\" title=\"（二）Inheritance Inversion（反向继承）\"></a>（二）Inheritance Inversion（反向继承）</h2><p><strong>反向继承可以解决上述的第二个疑问：</strong><br>组件wrappedComponent能否将props,state,function传递给EnhancedComponent？</p>\n<p>这里是指EnhacedComponent继承了WrappedComponent组件的生命周期、state和function。按照上篇文章提到的两点用途出发来深入理解II。</p>\n<ul>\n<li>渲染劫持（Render Highjacking） </li>\n<li>操作 state</li>\n</ul>\n<p> （2.1）渲染劫持</p>\n<blockquote>\n<p>本质就是EnhacedComponent继承了WrappedComponent组件的生命周期函数，尤其是render()函数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Wrappedcomponent</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">class Usual extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      usual: &apos;usual&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    console.log(&apos;didMount&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    console.log(this.props);</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        Usual</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Usual;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面是HOC</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">const iiHoc = WrappedComponent =&gt; class extends WrappedComponent &#123;</span><br><span class=\"line\">\t  constructor(props)&#123;</span><br><span class=\"line\">\t  \tsuper(props);</span><br><span class=\"line\">\t  \tthis.state = &#123;</span><br><span class=\"line\">\t  \t\t...this.state,</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  alertFunc = () =&gt;&#123;</span><br><span class=\"line\">\t  \talert(&quot;HOC&quot;);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      return &lt;div&gt;&#123;super.render()&#125;&lt;/div&gt;</span><br><span class=\"line\">     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default iiHoc;</span><br></pre></td></tr></table></figure>\n<p>这样会正常的渲染出来 Usual</p>\n<p>（2.2）操作 state</p>\n<blockquote>\n<p>本质就是EnhacedComponent继承了WrappedComponent组件的state</p>\n</blockquote>\n<pre><code>如图2-2-1通过this.state获取到WrappedComponent的state\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107211149475?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>但是，关键是在EnhacedComponent的constructor中没有定义自己的state！！</p>\n</blockquote>\n<p>若是定义就会出现的问题如下图2-2-2所示</p>\n<pre><code>图2-2-2 EnhancedComponent的constructor中定义state,那么this.state的取值\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107211424840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>EnhacedComponent的state覆盖了Wrapped Component的state。这时候的怎么让两者并存呢？如下图2-2-3所示</p>\n<pre><code>图2-2-3 EnhacedComponent的state与WrappedComponent的state并存\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107211543953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>（2.3）function的继承<br>这里就不多说，通过this.functionName()就可以调用到WrappedComponent中的方法。<strong>但是有一个注意的：若是EnhancedComponent中的方法与WrappedComponent的方法重名，那么EnhacedComponent函数覆盖Wrapped Component函数。</strong></p>\n<h2 id=\"（三）此处看一下父组件与高阶组件对比\"><a href=\"#（三）此处看一下父组件与高阶组件对比\" class=\"headerlink\" title=\"（三）此处看一下父组件与高阶组件对比\"></a>（三）此处看一下父组件与高阶组件对比</h2><p>有些同学可能会觉得高阶组件有些类似父组件的使用。例如，我们完全可以把高阶组件中的逻辑放到一个父组件中去执行，执行完成的结果再传递给子组件。从逻辑的执行流程上来看，高阶组件确实和父组件比较相像，但是高阶组件强调的是逻辑的抽象。高阶组件是一个函数，函数关注的是逻辑；父组件是一个组件，组件主要关注的是UI/DOM。如果逻辑是与DOM直接相关的，那么这部分逻辑适合放到父组件中实现；如果逻辑是与DOM不直接相关的，那么这部分逻辑适合使用高阶组件抽象，如数据校验、请求发送等。</p>\n<h2 id=\"（四）使用高阶组件遇到的问题\"><a href=\"#（四）使用高阶组件遇到的问题\" class=\"headerlink\" title=\"（四）使用高阶组件遇到的问题\"></a>（四）使用高阶组件遇到的问题</h2><p>（4.1）静态方法丢失<br>无论PP还是II的方式，WrappedComponent的静态方法都不会复制，如果要用需要我们单独复制。因为高阶组件返回的新组件，是不包含被包装组件的静态方法。<br>具体的解决方案如下</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000010845410\" target=\"_blank\" rel=\"noopener\">静态方法解决方式</a></p>\n</blockquote>\n<p>（4.2）refs不会传递。<br>意思就是HOC里指定的ref，并不会传递到子组件，如果你要使用最好写回调函数通过props传下去。</p>\n<p>（4.3）不要在render方法内部使用高阶组件。<br>简单来说react的差分算法会去比较 NowElement === OldElement, 来决定要不要替换这个elementTree。。因为高阶组件每次都会返回一个新的组件，在render中使用会导致每次渲染出来的组件都不相等（===），于是每次render，组件都会卸载（unmount），然后重新挂载（mount），既影响了效率，又丢失了组件及其子组件的状态。高阶组件最适合使用的地方是在组件定义的外部，这样就不会受到组件生命周期的影响了。</p>\n<p>（4.4）最重要的原则就是，注意高阶组件不会修改子组件，也不拷贝子组件的行为。<br>高阶组件只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数</p>\n<p>（4.5）要给hoc添加class名，便于debugger。<br>当我们在chrome里应用React-Developer-Tools的时候，组件结构可以一目了然，所以DisplayName最好还是加上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const getDisplayName = component =&gt; component.displayName || component.name</span><br><span class=\"line\">function hoc(WrappedComponent)&#123;</span><br><span class=\"line\">    return class HOC extends Component &#123;</span><br><span class=\"line\">        static displayName = `HOC($&#123;getDisplayName(WrappedComponent)&#125;)`</span><br><span class=\"line\">        constructor(props) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        componentWillMount() &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        render() &#123;</span><br><span class=\"line\">          return ()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default hoc;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000010845410\" target=\"_blank\" rel=\"noopener\">refs不会传递解决方法</a></p>\n</blockquote>\n<h2 id=\"（五）依然存留的疑问\"><a href=\"#（五）依然存留的疑问\" class=\"headerlink\" title=\"（五）依然存留的疑问\"></a>（五）依然存留的疑问</h2><p>1.上述两个问题中的第二个问题：.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？中没有解答是wrappedComponent能否将props传递给EnhancedComponent，这个没有找到资料，也许这是没有必要的操作。根据后续的深入开发以及学习中，也许会解答这个问题。<br>2.属性的校验<br>我们知道PropsTypes有着属性校验，那么EnhacedComponent与WrappedComponent之间的传值可以走属性校验吗？</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"（一）前篇回顾\"><a href=\"#（一）前篇回顾\" class=\"headerlink\" title=\"（一）前篇回顾\"></a>（一）前篇回顾</h2><p>上篇文章<a href=\"https://github.com/iuap-design/blog/issues/241\" target=\"_blank\" rel=\"noopener\">React高阶组件操作入门（一）</a>介绍了高阶组件的实现方式之一：PP（属性代理）。</p>\n<p>其实在第一篇提到，高阶组件的使用就是涉及到两个问题：</p>\n<p>1.高阶组件EnhanceComponent能否将props,state,function传递给wrappedComponent？<br>2.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？</p>","more":"<p>在第一篇文章就是解答了第一个问题，答案是能！！HOC将HOCd的props,state,function,当作props传给WrappedComponent组件，WrappedComponent通过this.props取到这些内容，如下图：</p>\n<pre><code>图1-1 EnhacedComponent组件传值\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107205438033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<pre><code>图1-2 WrappedComponent组件接收\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107205535216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"（二）Inheritance-Inversion（反向继承）\"><a href=\"#（二）Inheritance-Inversion（反向继承）\" class=\"headerlink\" title=\"（二）Inheritance Inversion（反向继承）\"></a>（二）Inheritance Inversion（反向继承）</h2><p><strong>反向继承可以解决上述的第二个疑问：</strong><br>组件wrappedComponent能否将props,state,function传递给EnhancedComponent？</p>\n<p>这里是指EnhacedComponent继承了WrappedComponent组件的生命周期、state和function。按照上篇文章提到的两点用途出发来深入理解II。</p>\n<ul>\n<li>渲染劫持（Render Highjacking） </li>\n<li>操作 state</li>\n</ul>\n<p> （2.1）渲染劫持</p>\n<blockquote>\n<p>本质就是EnhacedComponent继承了WrappedComponent组件的生命周期函数，尤其是render()函数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Wrappedcomponent</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">class Usual extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      usual: &apos;usual&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    console.log(&apos;didMount&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    console.log(this.props);</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        Usual</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Usual;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面是HOC</span><br><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">const iiHoc = WrappedComponent =&gt; class extends WrappedComponent &#123;</span><br><span class=\"line\">\t  constructor(props)&#123;</span><br><span class=\"line\">\t  \tsuper(props);</span><br><span class=\"line\">\t  \tthis.state = &#123;</span><br><span class=\"line\">\t  \t\t...this.state,</span><br><span class=\"line\">\t  \t&#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  alertFunc = () =&gt;&#123;</span><br><span class=\"line\">\t  \talert(&quot;HOC&quot;);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      return &lt;div&gt;&#123;super.render()&#125;&lt;/div&gt;</span><br><span class=\"line\">     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default iiHoc;</span><br></pre></td></tr></table></figure>\n<p>这样会正常的渲染出来 Usual</p>\n<p>（2.2）操作 state</p>\n<blockquote>\n<p>本质就是EnhacedComponent继承了WrappedComponent组件的state</p>\n</blockquote>\n<pre><code>如图2-2-1通过this.state获取到WrappedComponent的state\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107211149475?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>但是，关键是在EnhacedComponent的constructor中没有定义自己的state！！</p>\n</blockquote>\n<p>若是定义就会出现的问题如下图2-2-2所示</p>\n<pre><code>图2-2-2 EnhancedComponent的constructor中定义state,那么this.state的取值\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107211424840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>EnhacedComponent的state覆盖了Wrapped Component的state。这时候的怎么让两者并存呢？如下图2-2-3所示</p>\n<pre><code>图2-2-3 EnhacedComponent的state与WrappedComponent的state并存\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171107211543953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZGVyX3Bvb2w=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>（2.3）function的继承<br>这里就不多说，通过this.functionName()就可以调用到WrappedComponent中的方法。<strong>但是有一个注意的：若是EnhancedComponent中的方法与WrappedComponent的方法重名，那么EnhacedComponent函数覆盖Wrapped Component函数。</strong></p>\n<h2 id=\"（三）此处看一下父组件与高阶组件对比\"><a href=\"#（三）此处看一下父组件与高阶组件对比\" class=\"headerlink\" title=\"（三）此处看一下父组件与高阶组件对比\"></a>（三）此处看一下父组件与高阶组件对比</h2><p>有些同学可能会觉得高阶组件有些类似父组件的使用。例如，我们完全可以把高阶组件中的逻辑放到一个父组件中去执行，执行完成的结果再传递给子组件。从逻辑的执行流程上来看，高阶组件确实和父组件比较相像，但是高阶组件强调的是逻辑的抽象。高阶组件是一个函数，函数关注的是逻辑；父组件是一个组件，组件主要关注的是UI/DOM。如果逻辑是与DOM直接相关的，那么这部分逻辑适合放到父组件中实现；如果逻辑是与DOM不直接相关的，那么这部分逻辑适合使用高阶组件抽象，如数据校验、请求发送等。</p>\n<h2 id=\"（四）使用高阶组件遇到的问题\"><a href=\"#（四）使用高阶组件遇到的问题\" class=\"headerlink\" title=\"（四）使用高阶组件遇到的问题\"></a>（四）使用高阶组件遇到的问题</h2><p>（4.1）静态方法丢失<br>无论PP还是II的方式，WrappedComponent的静态方法都不会复制，如果要用需要我们单独复制。因为高阶组件返回的新组件，是不包含被包装组件的静态方法。<br>具体的解决方案如下</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000010845410\" target=\"_blank\" rel=\"noopener\">静态方法解决方式</a></p>\n</blockquote>\n<p>（4.2）refs不会传递。<br>意思就是HOC里指定的ref，并不会传递到子组件，如果你要使用最好写回调函数通过props传下去。</p>\n<p>（4.3）不要在render方法内部使用高阶组件。<br>简单来说react的差分算法会去比较 NowElement === OldElement, 来决定要不要替换这个elementTree。。因为高阶组件每次都会返回一个新的组件，在render中使用会导致每次渲染出来的组件都不相等（===），于是每次render，组件都会卸载（unmount），然后重新挂载（mount），既影响了效率，又丢失了组件及其子组件的状态。高阶组件最适合使用的地方是在组件定义的外部，这样就不会受到组件生命周期的影响了。</p>\n<p>（4.4）最重要的原则就是，注意高阶组件不会修改子组件，也不拷贝子组件的行为。<br>高阶组件只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数</p>\n<p>（4.5）要给hoc添加class名，便于debugger。<br>当我们在chrome里应用React-Developer-Tools的时候，组件结构可以一目了然，所以DisplayName最好还是加上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const getDisplayName = component =&gt; component.displayName || component.name</span><br><span class=\"line\">function hoc(WrappedComponent)&#123;</span><br><span class=\"line\">    return class HOC extends Component &#123;</span><br><span class=\"line\">        static displayName = `HOC($&#123;getDisplayName(WrappedComponent)&#125;)`</span><br><span class=\"line\">        constructor(props) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        componentWillMount() &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        render() &#123;</span><br><span class=\"line\">          return ()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default hoc;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000010845410\" target=\"_blank\" rel=\"noopener\">refs不会传递解决方法</a></p>\n</blockquote>\n<h2 id=\"（五）依然存留的疑问\"><a href=\"#（五）依然存留的疑问\" class=\"headerlink\" title=\"（五）依然存留的疑问\"></a>（五）依然存留的疑问</h2><p>1.上述两个问题中的第二个问题：.组件wrappedComponent能否将props,state,function传递给EnhancedComponent？中没有解答是wrappedComponent能否将props传递给EnhancedComponent，这个没有找到资料，也许这是没有必要的操作。根据后续的深入开发以及学习中，也许会解答这个问题。<br>2.属性的校验<br>我们知道PropsTypes有着属性校验，那么EnhacedComponent与WrappedComponent之间的传值可以走属性校验吗？</p>"},{"_content":"# git新操作备注\n\n标签（空格分隔）： git\n\n---\n\n使用git进行工程的操作，长期下来git pull 、git add 、git push、就可以完成日常所需，但是近期有些其他的操作，记录下来都是亲身测试有效的\n\n### 1.开个新分支\n（1）如果新建一个以develop内容为基础的分支\n\n - git checkout develop \n - git checkout -b yx0628develop_new\n\n不断修改不断的保存也是可以生成log的\n\n - git add .  //这是提交全部修改，慎重 \n - git commit -m'全部修改提交'\n\n（2）把新分支的代码合并到develop\n 前提：先把新分支yx0628develop_new的代码add完毕，commit完毕\n \n\n - git checkout develop  \n - git merge yx0628develop_new\n无冲突\n - git push \n有冲突\n - 解决冲突\n - git add 冲突文件\n - git commit -m'随便你想写什么'\n - git push\n\n###2.代码迁移仓库（保留log）\n不保留log等提交的记录的迁移就不说了，soeasy！\n目标：把A仓库的代码迁移到B仓库并且保存所有的git log，B仓库已经存在了哦，哪怕是个空仓库。\n\n再说这个之前先说点其他。在使用git的时候我们可能见到这样的命令。不想看解说想直接看步骤的，[直接步骤](#1)\n\n>     git pull origin master //拉取远程master分支的代码\n>     git push origin master //把代码推到远程master分支上去\n\n有没有人好奇为什么是origin，而不是其他名字，比如git pull orginal master或者git pull origin2 master;\n\n解答上面的问题很简单，请在你的工程中输入\n\n>     git remote\n发现了什么呢？默认就有一个origin，代表远程仓库。origin是有地址，地址就是当前仓库的git地址，是个url哦。所以为什么git push origin master就自动相应的推到的远程仓库的master分支了。\n\n\n<h2 id=\"1\">下面是正确的操作步骤，(看准情况分类很重要，就两种)</h2>\n不管哪种情况请从情况1开始看哈哈：\n\n<h2>情况1：</h2>\n**B仓库是一个空仓库，除了默认的master分支，没有任何分支**。把A的branch1,branch2,branch3...依次迁入B，B也就有branch1,branch2,branch3,\n\n - 进入A工程\n - git remote     \n    > 原因：看下当前远程仓库有啥名字，然后取个崭新的名字，不重复的名字，名字是过渡，不必纠结。这里取名origin2\n\n - git remote add origin2 master\n  > 不纠结照抄这就话\n - git remote set-url origin2 git@git.hub.com:B.git\n    > 原因：后面的B仓库地址url才是关键，origin2只是过渡，百人百种起法\n\n -  <span id=\"jump\">进入A工程的branch1分支上</span>\n - git pull \n   > 原因：拉取一下最新代码\n\n -  git checkout -b branchB1 \n > 原因：branchB1是基于A工程branch1开的新分支，代码跟A工程branch1一毛一样，**但是这个名字branchB1非常重要，非常重要**，原因只有一个：这个分支会被推到B工程，结果就是B工程下面就有这个分支。所以你懂的，万一你的B工程下面已经有了该分支名字，你这个做了好多工作的branchB1是根本推不上去的，是不是很疯狂\n\n - git push origin2\n \n > 结果：这一步能不能成功就看上一步，不多说，就看你取名字瞎不瞎\n\n\n如果上面的结束，说明已经成功迁移出一个分支了。常见问题：\n\n疑问1:问其他的分支怎么做，请重复\n - 进入A工程的branch2分支上\n - git pull \n - git checkout -b branchB2\n - git push origin2\nbranch2 变成branchB2然后被推到B仓库\n\n疑问2:你还问我第三个分支怎么迁移，不解释啦实在不行哎我还能说啥。\n\n疑问3: 我打眼一看B工程中的分支名字都是branchB1,branchB2....怎么破，\n改分支的名字直接登陆git.hub.com,打开工程你会看到branches这个，点进去可以修改.至于改名字，代码都迁移过去了，改个名字还很远吗\n\n<h2>情况2：</h2>\n**B仓库不是一个空仓库，里面各种各样乱七八糟的分支**。把A的branch1,branch2,branch3...一次迁入B，B也就有branch1,branch2,branch3,\n\n呃呃呃呃呃，\n步骤跟上面一毛一样，能不能推成功，就看你起名字的功夫了。什么名字，就是你最后要推到B工程上去的分支名字，注意在这里 [点击跳转](#jump)\n\n\n\n\n\n\n \n","source":"_posts/git.md","raw":"# git新操作备注\n\n标签（空格分隔）： git\n\n---\n\n使用git进行工程的操作，长期下来git pull 、git add 、git push、就可以完成日常所需，但是近期有些其他的操作，记录下来都是亲身测试有效的\n\n### 1.开个新分支\n（1）如果新建一个以develop内容为基础的分支\n\n - git checkout develop \n - git checkout -b yx0628develop_new\n\n不断修改不断的保存也是可以生成log的\n\n - git add .  //这是提交全部修改，慎重 \n - git commit -m'全部修改提交'\n\n（2）把新分支的代码合并到develop\n 前提：先把新分支yx0628develop_new的代码add完毕，commit完毕\n \n\n - git checkout develop  \n - git merge yx0628develop_new\n无冲突\n - git push \n有冲突\n - 解决冲突\n - git add 冲突文件\n - git commit -m'随便你想写什么'\n - git push\n\n###2.代码迁移仓库（保留log）\n不保留log等提交的记录的迁移就不说了，soeasy！\n目标：把A仓库的代码迁移到B仓库并且保存所有的git log，B仓库已经存在了哦，哪怕是个空仓库。\n\n再说这个之前先说点其他。在使用git的时候我们可能见到这样的命令。不想看解说想直接看步骤的，[直接步骤](#1)\n\n>     git pull origin master //拉取远程master分支的代码\n>     git push origin master //把代码推到远程master分支上去\n\n有没有人好奇为什么是origin，而不是其他名字，比如git pull orginal master或者git pull origin2 master;\n\n解答上面的问题很简单，请在你的工程中输入\n\n>     git remote\n发现了什么呢？默认就有一个origin，代表远程仓库。origin是有地址，地址就是当前仓库的git地址，是个url哦。所以为什么git push origin master就自动相应的推到的远程仓库的master分支了。\n\n\n<h2 id=\"1\">下面是正确的操作步骤，(看准情况分类很重要，就两种)</h2>\n不管哪种情况请从情况1开始看哈哈：\n\n<h2>情况1：</h2>\n**B仓库是一个空仓库，除了默认的master分支，没有任何分支**。把A的branch1,branch2,branch3...依次迁入B，B也就有branch1,branch2,branch3,\n\n - 进入A工程\n - git remote     \n    > 原因：看下当前远程仓库有啥名字，然后取个崭新的名字，不重复的名字，名字是过渡，不必纠结。这里取名origin2\n\n - git remote add origin2 master\n  > 不纠结照抄这就话\n - git remote set-url origin2 git@git.hub.com:B.git\n    > 原因：后面的B仓库地址url才是关键，origin2只是过渡，百人百种起法\n\n -  <span id=\"jump\">进入A工程的branch1分支上</span>\n - git pull \n   > 原因：拉取一下最新代码\n\n -  git checkout -b branchB1 \n > 原因：branchB1是基于A工程branch1开的新分支，代码跟A工程branch1一毛一样，**但是这个名字branchB1非常重要，非常重要**，原因只有一个：这个分支会被推到B工程，结果就是B工程下面就有这个分支。所以你懂的，万一你的B工程下面已经有了该分支名字，你这个做了好多工作的branchB1是根本推不上去的，是不是很疯狂\n\n - git push origin2\n \n > 结果：这一步能不能成功就看上一步，不多说，就看你取名字瞎不瞎\n\n\n如果上面的结束，说明已经成功迁移出一个分支了。常见问题：\n\n疑问1:问其他的分支怎么做，请重复\n - 进入A工程的branch2分支上\n - git pull \n - git checkout -b branchB2\n - git push origin2\nbranch2 变成branchB2然后被推到B仓库\n\n疑问2:你还问我第三个分支怎么迁移，不解释啦实在不行哎我还能说啥。\n\n疑问3: 我打眼一看B工程中的分支名字都是branchB1,branchB2....怎么破，\n改分支的名字直接登陆git.hub.com,打开工程你会看到branches这个，点进去可以修改.至于改名字，代码都迁移过去了，改个名字还很远吗\n\n<h2>情况2：</h2>\n**B仓库不是一个空仓库，里面各种各样乱七八糟的分支**。把A的branch1,branch2,branch3...一次迁入B，B也就有branch1,branch2,branch3,\n\n呃呃呃呃呃，\n步骤跟上面一毛一样，能不能推成功，就看你起名字的功夫了。什么名字，就是你最后要推到B工程上去的分支名字，注意在这里 [点击跳转](#jump)\n\n\n\n\n\n\n \n","slug":"git","published":1,"date":"2018-07-15T01:47:38.761Z","updated":"2018-07-15T01:47:42.634Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjm6kmrn0007hjxtei7h9dwv","content":"<h1 id=\"git新操作备注\"><a href=\"#git新操作备注\" class=\"headerlink\" title=\"git新操作备注\"></a>git新操作备注</h1><p>标签（空格分隔）： git</p>\n<hr>\n<p>使用git进行工程的操作，长期下来git pull 、git add 、git push、就可以完成日常所需，但是近期有些其他的操作，记录下来都是亲身测试有效的</p>\n<h3 id=\"1-开个新分支\"><a href=\"#1-开个新分支\" class=\"headerlink\" title=\"1.开个新分支\"></a>1.开个新分支</h3><p>（1）如果新建一个以develop内容为基础的分支</p>\n<ul>\n<li>git checkout develop </li>\n<li>git checkout -b yx0628develop_new</li>\n</ul>\n<p>不断修改不断的保存也是可以生成log的</p>\n<ul>\n<li>git add .  //这是提交全部修改，慎重 </li>\n<li>git commit -m’全部修改提交’</li>\n</ul>\n<p>（2）把新分支的代码合并到develop<br> 前提：先把新分支yx0628develop_new的代码add完毕，commit完毕</p>\n<ul>\n<li>git checkout develop  </li>\n<li>git merge yx0628develop_new<br>无冲突</li>\n<li>git push<br>有冲突</li>\n<li>解决冲突</li>\n<li>git add 冲突文件</li>\n<li>git commit -m’随便你想写什么’</li>\n<li>git push</li>\n</ul>\n<p>###2.代码迁移仓库（保留log）<br>不保留log等提交的记录的迁移就不说了，soeasy！<br>目标：把A仓库的代码迁移到B仓库并且保存所有的git log，B仓库已经存在了哦，哪怕是个空仓库。</p>\n<p>再说这个之前先说点其他。在使用git的时候我们可能见到这样的命令。不想看解说想直接看步骤的，<a href=\"#1\">直接步骤</a></p>\n<blockquote>\n<pre><code>git pull origin master //拉取远程master分支的代码\ngit push origin master //把代码推到远程master分支上去\n</code></pre></blockquote>\n<p>有没有人好奇为什么是origin，而不是其他名字，比如git pull orginal master或者git pull origin2 master;</p>\n<p>解答上面的问题很简单，请在你的工程中输入</p>\n<blockquote>\n<pre><code>git remote\n</code></pre><p>发现了什么呢？默认就有一个origin，代表远程仓库。origin是有地址，地址就是当前仓库的git地址，是个url哦。所以为什么git push origin master就自动相应的推到的远程仓库的master分支了。</p>\n</blockquote>\n<p></p><h2 id=\"1\">下面是正确的操作步骤，(看准情况分类很重要，就两种)</h2><br>不管哪种情况请从情况1开始看哈哈：<p></p>\n<p></p><h2>情况1：</h2><br><strong>B仓库是一个空仓库，除了默认的master分支，没有任何分支</strong>。把A的branch1,branch2,branch3…依次迁入B，B也就有branch1,branch2,branch3,<p></p>\n<ul>\n<li>进入A工程</li>\n<li><p>git remote     </p>\n<blockquote>\n<p>原因：看下当前远程仓库有啥名字，然后取个崭新的名字，不重复的名字，名字是过渡，不必纠结。这里取名origin2</p>\n</blockquote>\n</li>\n<li><p>git remote add origin2 master</p>\n<blockquote>\n<p>不纠结照抄这就话</p>\n</blockquote>\n</li>\n<li><p>git remote set-url origin2 <a href=\"mailto:git@git.hub.com\" target=\"_blank\" rel=\"noopener\">git@git.hub.com</a>:B.git</p>\n<blockquote>\n<p>原因：后面的B仓库地址url才是关键，origin2只是过渡，百人百种起法</p>\n</blockquote>\n</li>\n<li><p><span id=\"jump\">进入A工程的branch1分支上</span></p>\n</li>\n<li><p>git pull </p>\n<blockquote>\n<p>原因：拉取一下最新代码</p>\n</blockquote>\n</li>\n<li><p>git checkout -b branchB1 </p>\n<blockquote>\n<p>原因：branchB1是基于A工程branch1开的新分支，代码跟A工程branch1一毛一样，<strong>但是这个名字branchB1非常重要，非常重要</strong>，原因只有一个：这个分支会被推到B工程，结果就是B工程下面就有这个分支。所以你懂的，万一你的B工程下面已经有了该分支名字，你这个做了好多工作的branchB1是根本推不上去的，是不是很疯狂</p>\n</blockquote>\n</li>\n<li><p>git push origin2</p>\n<blockquote>\n<p>结果：这一步能不能成功就看上一步，不多说，就看你取名字瞎不瞎</p>\n</blockquote>\n</li>\n</ul>\n<p>如果上面的结束，说明已经成功迁移出一个分支了。常见问题：</p>\n<p>疑问1:问其他的分支怎么做，请重复</p>\n<ul>\n<li>进入A工程的branch2分支上</li>\n<li>git pull </li>\n<li>git checkout -b branchB2</li>\n<li>git push origin2<br>branch2 变成branchB2然后被推到B仓库</li>\n</ul>\n<p>疑问2:你还问我第三个分支怎么迁移，不解释啦实在不行哎我还能说啥。</p>\n<p>疑问3: 我打眼一看B工程中的分支名字都是branchB1,branchB2….怎么破，<br>改分支的名字直接登陆git.hub.com,打开工程你会看到branches这个，点进去可以修改.至于改名字，代码都迁移过去了，改个名字还很远吗</p>\n<p></p><h2>情况2：</h2><br><strong>B仓库不是一个空仓库，里面各种各样乱七八糟的分支</strong>。把A的branch1,branch2,branch3…一次迁入B，B也就有branch1,branch2,branch3,<p></p>\n<p>呃呃呃呃呃，<br>步骤跟上面一毛一样，能不能推成功，就看你起名字的功夫了。什么名字，就是你最后要推到B工程上去的分支名字，注意在这里 <a href=\"#jump\">点击跳转</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git新操作备注\"><a href=\"#git新操作备注\" class=\"headerlink\" title=\"git新操作备注\"></a>git新操作备注</h1><p>标签（空格分隔）： git</p>\n<hr>\n<p>使用git进行工程的操作，长期下来git pull 、git add 、git push、就可以完成日常所需，但是近期有些其他的操作，记录下来都是亲身测试有效的</p>\n<h3 id=\"1-开个新分支\"><a href=\"#1-开个新分支\" class=\"headerlink\" title=\"1.开个新分支\"></a>1.开个新分支</h3><p>（1）如果新建一个以develop内容为基础的分支</p>\n<ul>\n<li>git checkout develop </li>\n<li>git checkout -b yx0628develop_new</li>\n</ul>\n<p>不断修改不断的保存也是可以生成log的</p>\n<ul>\n<li>git add .  //这是提交全部修改，慎重 </li>\n<li>git commit -m’全部修改提交’</li>\n</ul>\n<p>（2）把新分支的代码合并到develop<br> 前提：先把新分支yx0628develop_new的代码add完毕，commit完毕</p>\n<ul>\n<li>git checkout develop  </li>\n<li>git merge yx0628develop_new<br>无冲突</li>\n<li>git push<br>有冲突</li>\n<li>解决冲突</li>\n<li>git add 冲突文件</li>\n<li>git commit -m’随便你想写什么’</li>\n<li>git push</li>\n</ul>\n<p>###2.代码迁移仓库（保留log）<br>不保留log等提交的记录的迁移就不说了，soeasy！<br>目标：把A仓库的代码迁移到B仓库并且保存所有的git log，B仓库已经存在了哦，哪怕是个空仓库。</p>\n<p>再说这个之前先说点其他。在使用git的时候我们可能见到这样的命令。不想看解说想直接看步骤的，<a href=\"#1\">直接步骤</a></p>\n<blockquote>\n<pre><code>git pull origin master //拉取远程master分支的代码\ngit push origin master //把代码推到远程master分支上去\n</code></pre></blockquote>\n<p>有没有人好奇为什么是origin，而不是其他名字，比如git pull orginal master或者git pull origin2 master;</p>\n<p>解答上面的问题很简单，请在你的工程中输入</p>\n<blockquote>\n<pre><code>git remote\n</code></pre><p>发现了什么呢？默认就有一个origin，代表远程仓库。origin是有地址，地址就是当前仓库的git地址，是个url哦。所以为什么git push origin master就自动相应的推到的远程仓库的master分支了。</p>\n</blockquote>\n<p></p><h2 id=\"1\">下面是正确的操作步骤，(看准情况分类很重要，就两种)</h2><br>不管哪种情况请从情况1开始看哈哈：<p></p>\n<p></p><h2>情况1：</h2><br><strong>B仓库是一个空仓库，除了默认的master分支，没有任何分支</strong>。把A的branch1,branch2,branch3…依次迁入B，B也就有branch1,branch2,branch3,<p></p>\n<ul>\n<li>进入A工程</li>\n<li><p>git remote     </p>\n<blockquote>\n<p>原因：看下当前远程仓库有啥名字，然后取个崭新的名字，不重复的名字，名字是过渡，不必纠结。这里取名origin2</p>\n</blockquote>\n</li>\n<li><p>git remote add origin2 master</p>\n<blockquote>\n<p>不纠结照抄这就话</p>\n</blockquote>\n</li>\n<li><p>git remote set-url origin2 <a href=\"mailto:git@git.hub.com\" target=\"_blank\" rel=\"noopener\">git@git.hub.com</a>:B.git</p>\n<blockquote>\n<p>原因：后面的B仓库地址url才是关键，origin2只是过渡，百人百种起法</p>\n</blockquote>\n</li>\n<li><p><span id=\"jump\">进入A工程的branch1分支上</span></p>\n</li>\n<li><p>git pull </p>\n<blockquote>\n<p>原因：拉取一下最新代码</p>\n</blockquote>\n</li>\n<li><p>git checkout -b branchB1 </p>\n<blockquote>\n<p>原因：branchB1是基于A工程branch1开的新分支，代码跟A工程branch1一毛一样，<strong>但是这个名字branchB1非常重要，非常重要</strong>，原因只有一个：这个分支会被推到B工程，结果就是B工程下面就有这个分支。所以你懂的，万一你的B工程下面已经有了该分支名字，你这个做了好多工作的branchB1是根本推不上去的，是不是很疯狂</p>\n</blockquote>\n</li>\n<li><p>git push origin2</p>\n<blockquote>\n<p>结果：这一步能不能成功就看上一步，不多说，就看你取名字瞎不瞎</p>\n</blockquote>\n</li>\n</ul>\n<p>如果上面的结束，说明已经成功迁移出一个分支了。常见问题：</p>\n<p>疑问1:问其他的分支怎么做，请重复</p>\n<ul>\n<li>进入A工程的branch2分支上</li>\n<li>git pull </li>\n<li>git checkout -b branchB2</li>\n<li>git push origin2<br>branch2 变成branchB2然后被推到B仓库</li>\n</ul>\n<p>疑问2:你还问我第三个分支怎么迁移，不解释啦实在不行哎我还能说啥。</p>\n<p>疑问3: 我打眼一看B工程中的分支名字都是branchB1,branchB2….怎么破，<br>改分支的名字直接登陆git.hub.com,打开工程你会看到branches这个，点进去可以修改.至于改名字，代码都迁移过去了，改个名字还很远吗</p>\n<p></p><h2>情况2：</h2><br><strong>B仓库不是一个空仓库，里面各种各样乱七八糟的分支</strong>。把A的branch1,branch2,branch3…一次迁入B，B也就有branch1,branch2,branch3,<p></p>\n<p>呃呃呃呃呃，<br>步骤跟上面一毛一样，能不能推成功，就看你起名字的功夫了。什么名字，就是你最后要推到B工程上去的分支名字，注意在这里 <a href=\"#jump\">点击跳转</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjjm6kmrg0002hjxtuxzx6ci1","tag_id":"cjjm6kmrl0006hjxtxm4wciq6","_id":"cjjm6kmrs000bhjxt8v3s84em"},{"post_id":"cjjm6kmrg0002hjxtuxzx6ci1","tag_id":"cjjm6kmrq0009hjxt8stvi5xe","_id":"cjjm6kmrt000chjxtml8quilm"},{"post_id":"cjjm6kmrj0004hjxtx4ahz3s7","tag_id":"cjjm6kmrl0006hjxtxm4wciq6","_id":"cjjm6kmru000ehjxtucappqhe"},{"post_id":"cjjm6kmrj0004hjxtx4ahz3s7","tag_id":"cjjm6kmrq0009hjxt8stvi5xe","_id":"cjjm6kmrv000fhjxtxomdti9b"}],"Tag":[{"name":"react","_id":"cjjm6kmrl0006hjxtxm4wciq6"},{"name":"hoc-react","_id":"cjjm6kmrq0009hjxt8stvi5xe"}]}}